// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/host";

import { ScreenVariantProvider } from "../components/plasmic/protect_2_self/PlasmicGlobalVariant__Screen";
import { PlasmicMinhasMetas } from "../components/plasmic/protect_2_self/PlasmicMinhasMetas";
import { useRouter } from "next/router";
import MiniaturaMeta from "../components/MiniaturaMeta";
import { useEffect, useState } from "react";
import axios from "axios";

function MinhasMetas() {
  // Use PlasmicMinhasMetas to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicMinhasMetas are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicMinhasMetas is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).
  
  const [metas, setMetas] = useState<any[]>();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error>();


  useEffect(() => {
    const getData = async () => {
      try {
        const resposta = await axios.get(
          "http://localhost:8080/usuario/getMetas/" + localStorage.getItem('userId')
        );
        setMetas(resposta.data);
        setError(undefined);
      } catch (err) {
        setError((err as any).message);
        setMetas([]);
      } finally {
        setLoading(false);
        console.log(metas)

      }
    };
    getData();
  }, []);

  async function mostraMetas(){
    if (!(document.getElementById("buscaMeta")as any).value){
      const response = await axios.get(
        "http://localhost:8080/usuario/getMetas/" + localStorage.getItem('userId')
      );
      setMetas(response.data);
    }
    else{
      const resposta = await axios.get(
          "http://localhost:8080/usuario/findMetaByNome/" + 
          localStorage.getItem('userId') + "/" + 
          (document.getElementById("buscaMeta")as any).value);
      setMetas(resposta.data);
    }
  }

	if (error) {
		return <div>Error: {error.message}</div>
	}

  function registraMeta(metaId: any){
    axios.put
    ("http://localhost:8080/usuario/regMeta/" + localStorage.getItem("userId") + "/" + String(metaId), {
        made: true,
    }).catch(error=>{

    }).then((response) => {
      window.location.reload();
    });
  }

  function registraFracasso(metaId: any){
    axios.put
    ("http://localhost:8080/usuario/regMeta/" + localStorage.getItem("userId") + "/" + String(metaId), {
        made: false,
    })
  }

  function estaNaData(ultimaData: Date, frequencia: any, id: any){
    var dia = 86400000
    var semana = 604800000
    var mes = 2592000000
    var data = new Date(ultimaData)
    var time = new Date().getTime() - data.getTime()
    if(!frequencia){
      return true
    }
    if(!ultimaData)
    return true;
    if(frequencia == "DIARIO"){
      if(time >= dia){
        if(time >= 2*dia ){
          registraFracasso(id)
        }
        return true
      }
    }
    if(frequencia == "SEMANAL"){
      if(time >= semana){
        if(time >= 2*semana  ){
          registraFracasso(id)
        }
        return true
      }
    }
    if(frequencia == "MENSAL"){
      if(time >= mes){
        if(time >= 2*mes){
          registraFracasso(id)
        }
        return true
      }
    }
    return false
  }

  /*
  */
  function temRank(rank: any){
    if(rank)
      return true
    return false
  }

  function tipoMedalha(rank: any){
    if(rank)
      return String(rank).toLowerCase()
    return false as any
  } 

  function formata(data: Date){
    var dia = new Date(data)
    if(data)
      return dia.toLocaleDateString("en-GB")
    return false as any
  }

  function calculaTempo(data: Date){
    var ultimoDia = new Date(data).toLocaleDateString()
    var hoje = new Date().toLocaleDateString()
    const diffInMs   = new Date(hoje).getTime() - new Date(ultimoDia).getTime()
    const diffInDays = diffInMs / (1000 * 60 * 60 * 24)
    return diffInDays
  }

  function tempoRestante(ultimaData: Date, frequencia: any){
    const agora = new Date().getTime()
    var tempoDecorrido   = agora - new Date(ultimaData).getTime()
    var tempoRestanteMs = 0
    if(frequencia == "DIARIO"){
      var dia = 86400000
      tempoRestanteMs = dia - tempoDecorrido
    }
    if(frequencia == "SEMANAL"){
      var semana = 604800000
      tempoRestanteMs = semana - tempoDecorrido
    }
    if(frequencia == "MENSAL"){
      var mes = 2592000000
      tempoRestanteMs = mes - tempoDecorrido
    }
    var cd = 24 * 60 * 60 * 1000,
      ch = 60 * 60 * 1000,
      d = Math.floor(tempoRestanteMs / cd),
      h = Math.floor( (tempoRestanteMs - d * cd) / ch),
      m = Math.round( (tempoRestanteMs - d * cd - h * ch) / 60000),
      pad = function(n: any){ return n < 10 ? '0' + n : n; };
      if( m === 60 ){
        h++;
        m = 0;
      }
      if( h === 24 ){
        d++;
        h = 0;
      }
      if(d == 0)
        return [pad(h), pad(m)].join(':');
      return [d, pad(h), pad(m)].join(':');
  }

  const router = useRouter()

  return (
    <ph.PageParamsProvider
      params={useRouter()?.query}
      query={useRouter()?.query}
    >
      <PlasmicMinhasMetas 
      buscaMeta = {{
        onChange : () => mostraMetas()
      }}
      container = {(loading || !metas) ? {} :{ 
        children: metas.map(entry => <MiniaturaMeta
          onClick={() => (localStorage.setItem('metaId', entry.id), router.push('/tela-meta'))} 
          nome={{
            render: (props, Comp) => <Comp {...props}>{entry.nome}</Comp>,
          }}
          sequenciaHabito={{
            render: (props, Comp) => <Comp {...props}>Atual sequência: {String(entry.atual)}</Comp>,
          }}
          sequenciaVicio={{
            render: (props, Comp) => <Comp {...props}>Atual sequência: {String(calculaTempo(entry.data))}</Comp>,
          }}
          comMedalha={temRank(entry.rank)}
          tipo={(String(entry.tipo).toLowerCase()) as any}
          medalha={{
            cor: tipoMedalha(entry.rank),
            slot: entry.nome,
            children: formata(entry.data)
          }}
          disponibilidade={!estaNaData(entry.data, entry.frequencia, entry.id) ? 
            {
            render: (props, Comp) => <Comp {...props}>
                Disponivel em: {String(tempoRestante(entry.data, entry.frequencia))}
              </Comp>
              } : {
                style:{display: "none"} 
            }}
          registra={{
            props: {
              isDisabled : !estaNaData(entry.data, entry.frequencia, entry.id),
              onClick: () => registraMeta(entry.id)
            }
          }}
        />) 
      }}
      />
    </ph.PageParamsProvider>
  );
}

export default MinhasMetas;
