// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/host";

import { ScreenVariantProvider } from "../components/plasmic/protect_2_self/PlasmicGlobalVariant__Screen";
import { PlasmicMinhasMetas } from "../components/plasmic/protect_2_self/PlasmicMinhasMetas";
import { useRouter } from "next/router";
import MiniaturaMeta from "../components/MiniaturaMeta";
import { useEffect, useState } from "react";
import axios from "axios";

function MinhasMetas() {
  // Use PlasmicMinhasMetas to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicMinhasMetas are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicMinhasMetas is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).
  
  const [metas, setMetas] = useState<any[]>();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error>();


  useEffect(() => {
    const getData = async () => {
      try {
        const response = await axios.get(
          "http://localhost:8080/usuario/getMetas/" + localStorage.getItem('userId')
        );
        setMetas(response.data);
        setError(undefined);
        console.log(metas);
      } catch (err) {
        setError((err as any).message);
        setMetas([]);
      } finally {
        setLoading(false);
      }
    };
    getData();
  }, []);

  async function mostraMetas(){
    if (!(document.getElementById("buscaMeta")as any).value){
      const response = await axios.get(
        "http://localhost:8080/usuario/getMetas/" + localStorage.getItem('userId')
      );
      console.log(response);
      setMetas(response.data);
      console.log(metas);
    }
    else{
      const resposta = await axios.get(
          "http://localhost:8080/usuario/findMetaByNome/" + 
          localStorage.getItem('userId') + "/" + 
          (document.getElementById("buscaMeta")as any).value);
      setMetas(resposta.data);
      console.log(metas);
    }
  }

	if (error) {
		return <div>Error: {error.message}</div>
	}

  function registraMeta(metaId: any){
    axios.put
    ("http://localhost:8080/usuario/regMeta/" + localStorage.getItem("userId") + "/" + String(metaId), {
        made: true,
    }).catch(error=>{

    }).then((response) => {
      window.location.reload();
    });
  }

  function estaNaData(ultimaData: Date, frequencia: any){
    var dia = new Date("2013-02-20T12:01:04.753Z").getTime() - 
              new Date("2013-02-21T12:01:04.753Z").getTime();
    var semana = new Date("2013-02-20T12:01:04.753Z").getTime() - 
                 new Date("2013-02-27T12:01:04.753Z").getTime();
    var mes = new Date("2013-01-20T12:01:04.753Z").getTime() - 
              new Date("2013-02-20T12:01:04.753Z").getTime();
    var data = new Date(ultimaData)
    var time = new Date().getTime() - data.getTime()
    if(!frequencia){
      return true
    }
    if(!ultimaData)
      return true;
    if(frequencia == "DIARIO"){
      if(time >= dia){
          if(time <= 2*dia )
            //zerar contador
        return true
      }
    }
    if(frequencia == "SEMANAL"){
      if(time >= semana){
        if(time <= 2*semana  )
          //zerar
        return true
      }
    }
    if(frequencia == "MENSAL"){
      if(time >= mes){
        if(time <= 2*mes)
          //zerar
        return true
      }
    }
    return false
  }

  /*
  */
  function temRank(rank: any){
    if(rank)
      return true
    return false
  }

  function tipoMedalha(rank: any){
    if(rank)
      return String(rank).toLowerCase()
    return false as any
  } 

  function formata(data: Date){
    var dia = new Date(data)
    if(data)
      return dia.toLocaleDateString("en-GB")
    return false as any
  }

  return (
    <ph.PageParamsProvider
      params={useRouter()?.query}
      query={useRouter()?.query}
    >
      <PlasmicMinhasMetas 
      buscaMeta = {{
        onChange : () => mostraMetas()
      }}
      container = {(loading || !metas) ? {} :{ 
        children: metas.map(entry => <MiniaturaMeta                                               
          slot={String(entry.nome)} 
          slot2={"Atual sequÃªncia: " + String(entry.recorde)}
          comMedalha={temRank(entry.rank)}
          medalha={{
            cor: tipoMedalha(entry.rank),
            slot: entry.nome,
            children: formata(entry.data)
          }}
          registra={{
            props: {
              isDisabled : !estaNaData(entry.data, entry.frequencia),
              onClick: () => registraMeta(entry.id)
            }
          }}
          /*
          */
        />) 
      }}
      />
    </ph.PageParamsProvider>
  );
}

export default MinhasMetas;
