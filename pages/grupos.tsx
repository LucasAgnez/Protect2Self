// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/host";

import { ScreenVariantProvider } from "../components/plasmic/protect_2_self/PlasmicGlobalVariant__Screen";
import { PlasmicMeusGrupos } from "../components/plasmic/protect_2_self/PlasmicMeusGrupos";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import axios from "axios";
import MiniaturaGrupo from "../components/MiniaturaGrupo";

function MeusGrupos() {
  // Use PlasmicMeusGrupos to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicMeusGrupos are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicMeusGrupos is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).

  const [grupos, setGrupos] = useState<any[]>();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error>();

  const router = useRouter()

  useEffect(() => {
    const getData = async () => {
      try {
        const response = await axios.get(
          "http://localhost:8080/grupo/getGrupos/" + localStorage.getItem('userId')
        );
        setGrupos(response.data);
        setError(undefined);  
        console.log(grupos);
      } catch (err) {
        setError((err as any).message);
        setGrupos([]);
      } finally {
        setLoading(false);
      }
    };
    getData();
  }, []);
  if (error) {
    return <div>Error: {error.message}</div>
  }

  async function mostraGrupos(){
    if (!(document.getElementById("buscaGrupo")as any).value){
      const response = await axios.get(
        "http://localhost:8080/grupo/getGrupos/" + localStorage.getItem('userId')
      );
      setGrupos(response.data);
      console.log(grupos);
    }
    else{
      const resposta = await axios.get(
          "http://localhost:8080/grupo/findGruposByNome/"+ localStorage.getItem('userId') + "/" + (document.getElementById("buscaGrupo")as any).value)
      setGrupos(resposta.data);
      console.log(grupos);
    }
  }

  function calculaTempo(meta: any){
    if(String(meta.tipo).toLowerCase() == "vicio"){
      var ultimoDia = new Date(meta.data).toLocaleDateString()
      var hoje = new Date().toLocaleDateString()
      const diffInMs   = new Date(hoje).getTime() - new Date(ultimoDia).getTime()
      const diffInDays = diffInMs / (1000 * 60 * 60 * 24);
      return diffInDays
    }
    else{
      return meta.atual
    }
  }


  return (
    <ph.PageParamsProvider
      params={useRouter()?.query}
      query={useRouter()?.query}
    >
      <PlasmicMeusGrupos 
      container = {(loading || !grupos) ? {} :{
        children: grupos.map(entry => <MiniaturaGrupo
          onClick={() => (localStorage.setItem('grupoId', entry.id), router.push('/tela-grupo'))} 
          nomeGrupo={{
            render: (props, Comp) => <Comp {...props}>{entry.nome}</Comp>,
          }}
          metaGrupo={{
            render: (props, Comp) => <Comp {...props}>{String(entry.meta.nome)}</Comp>,
          }}
          sequencia={{
            render: (props, Comp) => <Comp {...props}>Atual sequÃªncia: {String(calculaTempo(entry.meta))}</Comp>,
          }}
          />) 
        }}
      buscaGrupo = {{
        onChange : () => mostraGrupos()
      }}
      />
    </ph.PageParamsProvider>
  );
}

export default MeusGrupos;
