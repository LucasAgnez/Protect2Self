// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/host";

import { ScreenVariantProvider } from "../components/plasmic/protect_2_self/PlasmicGlobalVariant__Screen";
import { PlasmicTelaGrupo } from "../components/plasmic/protect_2_self/PlasmicTelaGrupo";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import axios from "axios";
import MiniaturaAmigo from "../components/MiniaturaAmigo";

function TelaGrupo() {
  // Use PlasmicTelaGrupo to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicTelaGrupo are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicTelaGrupo is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).

  const [membros, setMembros] = useState<any[]>();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error>();
  const [ADM, setADM] = useState<boolean>(false);
  const [admin, setAdmin] = useState<any>();
  const [grupo, setGrupo] = useState<any>(null);

  useEffect(() => {
    const getData = async () => {
      try {
        const responseMembros = await axios.get(
          "http://localhost:8080/grupo/getMembros/" + localStorage.getItem('grupoId')
        );
        setMembros(responseMembros.data);
        const responseAdmin = await axios.get(
          "http://localhost:8080/grupo/getAdm/" + localStorage.getItem('grupoId')
        );
        setAdmin(responseAdmin.data)
        const responseGrupo = await axios.get(
          "http://localhost:8080/grupo/findById/" + localStorage.getItem('grupoId')
        );
        setGrupo(responseGrupo.data)
        setError(undefined);  
        if (localStorage.getItem('userId') == String(responseAdmin.data.id)){
            setADM(true);
        }
      } catch (err) {
        setError((err as any).message);
        setMembros([]);
      } finally {
        setLoading(false);
      }
    };
    getData();
  }, []);
	if (error) {
		return <div>Error: {error.message}</div>
	}

  function expulsa(friendId: any){
    axios.delete("http://localhost:8080/grupo/removeUser/" + localStorage.getItem('grupoId') + "/" + friendId)
  }
  
  function metaADM(){
    for (var i in admin.metas){
      if(admin.metas[i].id == grupo.meta.id)
        return grupo.meta.nome
    }
  }

  function nomeADM(){
    return admin.nome
  }

  function medalhaADM(){
    for (var i in admin.metas){
      if(admin.metas[i].id == grupo.meta.id)
        return grupo.meta.rank
    }
    return false as any
  }

  function obtencaoRank(){
    for (var i in admin.metas){
      if(admin.metas[i].id == grupo.meta.id)
        return grupo.meta.obtencaoRank
    }
    return false as any
  }

  function temRank(rank: any){
    if(rank)
      return true
    return false
  }

  function tipoMedalha(rank: any){
    if(rank)
      return String(rank).toLowerCase()
    return false as any
  } 

  function formata(data: Date){
    var dia = new Date(data)
    if(data)
      return dia.toLocaleDateString("en-GB")
    return false as any
  }

  return (
    <ph.PageParamsProvider
      params={useRouter()?.query}
      query={useRouter()?.query}
    >
      <PlasmicTelaGrupo
        nomeGrupo={(loading || !grupo ) ? {} : {
          render: (props, Comp) => <Comp {...props}>{grupo.nome}</Comp>,
        }}
        nomeGrupoAdm={(loading || !grupo ) ? {} : {
          render: (props, Comp) => <Comp {...props}>{grupo.nome}</Comp>,
        }}
        adm={ADM}
        container = {(loading || !membros ) ? {} :  (ADM) ? {
          children: membros.map(entry => <MiniaturaAmigo 
            nomeUsuario={{
              render: (props, Comp) => <Comp {...props}>{entry.username}</Comp>,
            }}
            semMedalha={!temRank(entry.meta.rank)}
            medalha={{
              cor: tipoMedalha(entry.meta.rank),
              slot: entry.meta.nome,
              children: formata(entry.meta.data)
            }}
            emGrupo={"visaoDoAdm"}
            remove={{
              props: {
                onClick: () => expulsa(entry.id)
              }                                              
            }}
          />) 
        } : {
          children: membros.map(entry => <MiniaturaAmigo 
            nomeUsuario={{
              render: (props, Comp) => <Comp {...props}>{entry.username}</Comp>,
            }}
            metaUsuario={{
              render: (props, Comp) => <Comp {...props}>{entry.username}</Comp>,
            }}
            semMedalha={!temRank(entry.meta.rank)}
            medalha={{
              cor: tipoMedalha(entry.meta.rank),
              slot: entry.meta.nome,
              children: formata(entry.meta.data)
            }}
            emGrupo={"visaoMembros"}
          />)
        }}
        admin = {(loading || !admin) ? {} :{ 
            children: <MiniaturaAmigo 
              nomeUsuario={{
                render: (props, Comp) => <Comp {...props}>{nomeADM()}</Comp>,
              }}
              metaUsuario={{
                render: (props, Comp) => <Comp {...props}>{metaADM()}</Comp>,
              }}
              medalha={ medalhaADM() ?  {
                cor: medalhaADM().toLowerCase(),
                slot: String(grupo.meta.nome),
                children: formata(grupo.meta.data)
              } : {
                style:{display: "none"} 
              }}
              emGrupo={"adm"}
            />
        }} 
      />
    </ph.PageParamsProvider>
  );
}

export default TelaGrupo;
