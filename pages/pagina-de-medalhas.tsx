// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/host";

import { ScreenVariantProvider } from "../components/plasmic/protect_2_self/PlasmicGlobalVariant__Screen";
import { PlasmicPaginaDeMedalhas } from "../components/plasmic/protect_2_self/PlasmicPaginaDeMedalhas";
import { useRouter } from "next/router";
import axios from "axios";
import { useEffect, useState } from "react";
import Medalha from "../components/Medalha";

function PaginaDeMedalhas() {
  // Use PlasmicPaginaDeMedalhas to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicPaginaDeMedalhas are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicPaginaDeMedalhas is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).

  const [medalhas, setMedalhas] = useState<any[]>();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error>();

  const router = useRouter()

  useEffect(() => {
    const getData = async () => {
      try {
        const response = await axios.get(
          "http://localhost:8080/usuario/getMedalhas/" + localStorage.getItem('userId')
        );
        setMedalhas(response.data);
        setError(undefined);  
        console.log(medalhas);
      } catch (err) {
        setError((err as any).message);
        setMedalhas([]); 
      } finally {
        setLoading(false);
      }
    };
    getData();
  }, []);
  if (error) {
		return <div>Error: {error.message}</div>
	}

  function tipoMedalha(rank: any){
    if(rank)
      return String(rank).toLowerCase()
    return false as any
  } 

  function formata(data: Date){
    var dia = new Date(data)
    if(data)
      return dia.toLocaleDateString("en-GB")
    return false as any
  }
  return (
    <ph.PageParamsProvider
      params={useRouter()?.query}
      query={useRouter()?.query}
    >
      <PlasmicPaginaDeMedalhas 
            container = {(loading || !medalhas) ? {} :{ 
              children: medalhas.map(entry => <Medalha 
                slot={String(entry.nome)}
                children={String(formata(entry.dataObtencao))}
                cor={tipoMedalha(entry.tipo)}
              />) 
              }}
            />
    </ph.PageParamsProvider>
  );
}

export default PaginaDeMedalhas;
