// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: tRAjWGA5Mr
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SignIn from "../../SignIn"; // plasmic-import: qQDZACe0NE/component
import SignUp from "../../SignUp"; // plasmic-import: 5zVsdLWHz-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicSignInUp.module.css"; // plasmic-import: tRAjWGA5Mr/css

export type PlasmicSignInUp__VariantMembers = {};

export type PlasmicSignInUp__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignInUp__VariantsArgs;
export const PlasmicSignInUp__VariantProps = new Array<VariantPropType>();

export type PlasmicSignInUp__ArgsType = {};
type ArgPropType = keyof PlasmicSignInUp__ArgsType;
export const PlasmicSignInUp__ArgProps = new Array<ArgPropType>();

export type PlasmicSignInUp__OverridesType = {
  root?: p.Flex<"div">;
  signIn?: p.Flex<typeof SignIn>;
  signUp?: p.Flex<typeof SignUp>;
};

export interface DefaultSignInUpProps {
  className?: string;
}

function PlasmicSignInUp__RenderFunc(props: {
  variants: PlasmicSignInUp__VariantsArgs;
  args: PlasmicSignInUp__ArgsType;
  overrides: PlasmicSignInUp__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicLink
        className={classNames(projectcss.all, projectcss.a, sty.link__fteNu)}
        component={Link}
        href={`/`}
        platform={"nextjs"}
      >
        <SignIn
          data-plasmic-name={"signIn"}
          data-plasmic-override={overrides.signIn}
          className={classNames("__wab_instance", sty.signIn)}
        />
      </p.PlasmicLink>

      <p.PlasmicLink
        className={classNames(projectcss.all, projectcss.a, sty.link__dj573)}
        component={Link}
        href={`/criar-conta`}
        platform={"nextjs"}
      >
        <SignUp
          data-plasmic-name={"signUp"}
          data-plasmic-override={overrides.signUp}
          className={classNames("__wab_instance", sty.signUp)}
        />
      </p.PlasmicLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "signIn", "signUp"],
  signIn: ["signIn"],
  signUp: ["signUp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  signIn: typeof SignIn;
  signUp: typeof SignUp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignInUp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignInUp__VariantsArgs;
    args?: PlasmicSignInUp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignInUp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSignInUp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignInUp__ArgProps,
          internalVariantPropNames: PlasmicSignInUp__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSignInUp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignInUp";
  } else {
    func.displayName = `PlasmicSignInUp.${nodeName}`;
  }
  return func;
}

export const PlasmicSignInUp = Object.assign(
  // Top-level PlasmicSignInUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    signIn: makeNodeComponent("signIn"),
    signUp: makeNodeComponent("signUp"),

    // Metadata about props expected for PlasmicSignInUp
    internalVariantProps: PlasmicSignInUp__VariantProps,
    internalArgProps: PlasmicSignInUp__ArgProps
  }
);

export default PlasmicSignInUp;
/* prettier-ignore-end */
