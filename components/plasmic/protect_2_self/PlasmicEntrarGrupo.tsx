// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: vZVRnbazPqu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLogged from "../../HeaderLogged"; // plasmic-import: gLO3qE5tA7/component
import BotoesMenuPrincipal from "../../BotoesMenuPrincipal"; // plasmic-import: 8PboOpLyrBm/component
import Button from "../../Button"; // plasmic-import: CJ-3PKujtR-/component
import Select from "../../Select"; // plasmic-import: JvLnzcKYZbb/component

import { useScreenVariants as useScreenVariantswwY5HaVRu8X4 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WwY5HA-vRU8x4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicEntrarGrupo.module.css"; // plasmic-import: vZVRnbazPqu/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import LeftArrowSvgrepoComsvgIcon from "./icons/PlasmicIcon__LeftArrowSvgrepoComsvg"; // plasmic-import: fmFspLMBVy/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon

export type PlasmicEntrarGrupo__VariantMembers = {
  importar: "importar";
};
export type PlasmicEntrarGrupo__VariantsArgs = {
  importar?: SingleBooleanChoiceArg<"importar">;
};
type VariantPropType = keyof PlasmicEntrarGrupo__VariantsArgs;
export const PlasmicEntrarGrupo__VariantProps = new Array<VariantPropType>(
  "importar"
);

export type PlasmicEntrarGrupo__ArgsType = {};
type ArgPropType = keyof PlasmicEntrarGrupo__ArgsType;
export const PlasmicEntrarGrupo__ArgProps = new Array<ArgPropType>();

export type PlasmicEntrarGrupo__OverridesType = {
  root?: p.Flex<"div">;
  headerLogged?: p.Flex<typeof HeaderLogged>;
  columns?: p.Flex<"div">;
  botoesMenuPrincipal?: p.Flex<typeof BotoesMenuPrincipal>;
  voltar?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  nomeGrupo?: p.Flex<"h2">;
  descricaoGrupo?: p.Flex<"div">;
  metaGrupo?: p.Flex<"h3">;
  descricaoMeta?: p.Flex<"div">;
  aceitar?: p.Flex<typeof Button>;
  aceitar2?: p.Flex<typeof Button>;
  h6?: p.Flex<"h6">;
  meta?: p.Flex<typeof Select>;
  entrar?: p.Flex<typeof Button>;
};

export interface DefaultEntrarGrupoProps {}

function PlasmicEntrarGrupo__RenderFunc(props: {
  variants: PlasmicEntrarGrupo__VariantsArgs;
  args: PlasmicEntrarGrupo__ArgsType;
  overrides: PlasmicEntrarGrupo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "importar",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.importar
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswwY5HaVRu8X4()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root,
              { [sty.rootimportar]: hasVariant($state, "importar", "importar") }
            )}
          >
            {true ? (
              <HeaderLogged
                data-plasmic-name={"headerLogged"}
                data-plasmic-override={overrides.headerLogged}
                className={classNames("__wab_instance", sty.headerLogged)}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__mjIog)}>
                  <BotoesMenuPrincipal
                    data-plasmic-name={"botoesMenuPrincipal"}
                    data-plasmic-override={overrides.botoesMenuPrincipal}
                    className={classNames(
                      "__wab_instance",
                      sty.botoesMenuPrincipal
                    )}
                  />
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.column__zfGqd)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mDAms)}
                    >
                      <Button
                        data-plasmic-name={"voltar"}
                        data-plasmic-override={overrides.voltar}
                        className={classNames("__wab_instance", sty.voltar)}
                        color={"clear" as const}
                        link={`/notificacoes`}
                        shape={"round" as const}
                      >
                        <LeftArrowSvgrepoComsvgIcon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      </Button>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wgyCq,
                          {
                            [sty.freeBoximportar__wgyCqho2RZ]: hasVariant(
                              $state,
                              "importar",
                              "importar"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xua11
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iAuHl
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  data-plasmic-name={"nomeGrupo"}
                                  data-plasmic-override={overrides.nomeGrupo}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.nomeGrupo
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#FFFFFF" }}
                                    >
                                      {"Nome Grupo"}
                                    </span>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>

                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pazS
                              )}
                            >
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vPxs
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"descricaoGrupo"}
                                    data-plasmic-override={
                                      overrides.descricaoGrupo
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.descricaoGrupo
                                    )}
                                  >
                                    {"texto"}
                                  </div>
                                </div>
                              ) : null}

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__savsg
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h5
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h5,
                                        projectcss.__wab_text,
                                        sty.h5__jVmDb
                                      )}
                                    >
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ color: "#757575" }}
                                        >
                                          {"Descrição:"}
                                        </span>
                                      </React.Fragment>
                                    </h5>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </div>
                            </div>
                          ) : null}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5HcEu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yocBw
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h3
                                  data-plasmic-name={"metaGrupo"}
                                  data-plasmic-override={overrides.metaGrupo}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.metaGrupo
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#FFFFFF" }}
                                    >
                                      {"Nome Meta"}
                                    </span>
                                  </React.Fragment>
                                </h3>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>

                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hCfqd
                              )}
                            >
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__suk1P
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"descricaoMeta"}
                                    data-plasmic-override={
                                      overrides.descricaoMeta
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.descricaoMeta
                                    )}
                                  >
                                    {"texto"}
                                  </div>
                                </div>
                              ) : null}
                            </div>
                          ) : null}
                        </div>

                        {(
                          hasVariant($state, "importar", "importar")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eiMw,
                              {
                                [sty.freeBoximportar__eiMwho2RZ]: hasVariant(
                                  $state,
                                  "importar",
                                  "importar"
                                )
                              }
                            )}
                          >
                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9B0Jy
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h5
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h5,
                                        projectcss.__wab_text,
                                        sty.h5__zQv2O
                                      )}
                                    >
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ color: "#757575" }}
                                        >
                                          {
                                            "Quer usar meta do grupo ou  importar uma própria?"
                                          }
                                        </span>
                                      </React.Fragment>
                                    </h5>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </div>
                            ) : null}
                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__eaoAl,
                                  {
                                    [sty.freeBoximportar__eaoAlho2RZ]:
                                      hasVariant($state, "importar", "importar")
                                  }
                                )}
                              >
                                <Button
                                  data-plasmic-name={"aceitar"}
                                  data-plasmic-override={overrides.aceitar}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.aceitar
                                  )}
                                  color={"yellow" as const}
                                >
                                  {"Entrar"}
                                </Button>

                                {true ? (
                                  <Button
                                    data-plasmic-name={"aceitar2"}
                                    data-plasmic-override={overrides.aceitar2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.aceitar2
                                    )}
                                    color={"yellow" as const}
                                  >
                                    {"Importar"}
                                  </Button>
                                ) : null}
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                        {(
                          hasVariant($state, "importar", "importar")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5Meac,
                              {
                                [sty.freeBoximportar___5MeaCho2RZ]: hasVariant(
                                  $state,
                                  "importar",
                                  "importar"
                                )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1Huix,
                                {
                                  [sty.textimportar___1Huixho2RZ]: hasVariant(
                                    $state,
                                    "importar",
                                    "importar"
                                  )
                                }
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <h6
                                    data-plasmic-name={"h6"}
                                    data-plasmic-override={overrides.h6}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h6,
                                      projectcss.__wab_text,
                                      sty.h6
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ color: "#888888" }}
                                      >
                                        {"Escolha sua meta:"}
                                      </span>
                                    </React.Fragment>
                                  </h6>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            </div>

                            <Select
                              data-plasmic-name={"meta"}
                              data-plasmic-override={overrides.meta}
                              aria-label={"Seleciona Meta" as const}
                              className={classNames(
                                "__wab_instance",
                                sty.meta,
                                {
                                  [sty.metaimportar]: hasVariant(
                                    $state,
                                    "importar",
                                    "importar"
                                  )
                                }
                              )}
                              color={"dark" as const}
                              id={"meta" as const}
                            >
                              {null}
                            </Select>
                          </div>
                        ) : null}
                        {(
                          hasVariant($state, "importar", "importar")
                            ? true
                            : true
                        ) ? (
                          <Button
                            data-plasmic-name={"entrar"}
                            data-plasmic-override={overrides.entrar}
                            className={classNames(
                              "__wab_instance",
                              sty.entrar,
                              {
                                [sty.entrarimportar]: hasVariant(
                                  $state,
                                  "importar",
                                  "importar"
                                )
                              }
                            )}
                            color={"yellow" as const}
                          >
                            {"Entrar"}
                          </Button>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLogged",
    "columns",
    "botoesMenuPrincipal",
    "voltar",
    "svg",
    "nomeGrupo",
    "descricaoGrupo",
    "metaGrupo",
    "descricaoMeta",
    "aceitar",
    "aceitar2",
    "h6",
    "meta",
    "entrar"
  ],
  headerLogged: ["headerLogged"],
  columns: [
    "columns",
    "botoesMenuPrincipal",
    "voltar",
    "svg",
    "nomeGrupo",
    "descricaoGrupo",
    "metaGrupo",
    "descricaoMeta",
    "aceitar",
    "aceitar2",
    "h6",
    "meta",
    "entrar"
  ],
  botoesMenuPrincipal: ["botoesMenuPrincipal"],
  voltar: ["voltar", "svg"],
  svg: ["svg"],
  nomeGrupo: ["nomeGrupo"],
  descricaoGrupo: ["descricaoGrupo"],
  metaGrupo: ["metaGrupo"],
  descricaoMeta: ["descricaoMeta"],
  aceitar: ["aceitar"],
  aceitar2: ["aceitar2"],
  h6: ["h6"],
  meta: ["meta"],
  entrar: ["entrar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLogged: typeof HeaderLogged;
  columns: "div";
  botoesMenuPrincipal: typeof BotoesMenuPrincipal;
  voltar: typeof Button;
  svg: "svg";
  nomeGrupo: "h2";
  descricaoGrupo: "div";
  metaGrupo: "h3";
  descricaoMeta: "div";
  aceitar: typeof Button;
  aceitar2: typeof Button;
  h6: "h6";
  meta: typeof Select;
  entrar: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEntrarGrupo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEntrarGrupo__VariantsArgs;
    args?: PlasmicEntrarGrupo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEntrarGrupo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEntrarGrupo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEntrarGrupo__ArgProps,
          internalVariantPropNames: PlasmicEntrarGrupo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEntrarGrupo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEntrarGrupo";
  } else {
    func.displayName = `PlasmicEntrarGrupo.${nodeName}`;
  }
  return func;
}

export const PlasmicEntrarGrupo = Object.assign(
  // Top-level PlasmicEntrarGrupo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLogged: makeNodeComponent("headerLogged"),
    columns: makeNodeComponent("columns"),
    botoesMenuPrincipal: makeNodeComponent("botoesMenuPrincipal"),
    voltar: makeNodeComponent("voltar"),
    svg: makeNodeComponent("svg"),
    nomeGrupo: makeNodeComponent("nomeGrupo"),
    descricaoGrupo: makeNodeComponent("descricaoGrupo"),
    metaGrupo: makeNodeComponent("metaGrupo"),
    descricaoMeta: makeNodeComponent("descricaoMeta"),
    aceitar: makeNodeComponent("aceitar"),
    aceitar2: makeNodeComponent("aceitar2"),
    h6: makeNodeComponent("h6"),
    meta: makeNodeComponent("meta"),
    entrar: makeNodeComponent("entrar"),

    // Metadata about props expected for PlasmicEntrarGrupo
    internalVariantProps: PlasmicEntrarGrupo__VariantProps,
    internalArgProps: PlasmicEntrarGrupo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEntrarGrupo;
/* prettier-ignore-end */
