// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: 605FdbX2DfO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLogged from "../../HeaderLogged"; // plasmic-import: gLO3qE5tA7/component
import Button from "../../Button"; // plasmic-import: CJ-3PKujtR-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicEntrarGrupo.module.css"; // plasmic-import: 605FdbX2DfO/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon

export type PlasmicEntrarGrupo__VariantMembers = {};
export type PlasmicEntrarGrupo__VariantsArgs = {};
type VariantPropType = keyof PlasmicEntrarGrupo__VariantsArgs;
export const PlasmicEntrarGrupo__VariantProps = new Array<VariantPropType>();

export type PlasmicEntrarGrupo__ArgsType = {
  fotoGrupo?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicEntrarGrupo__ArgsType;
export const PlasmicEntrarGrupo__ArgProps = new Array<ArgPropType>(
  "fotoGrupo",
  "slot",
  "slot2"
);

export type PlasmicEntrarGrupo__OverridesType = {
  root?: p.Flex<"div">;
  headerLogged?: p.Flex<typeof HeaderLogged>;
  dados?: p.Flex<"div">;
  entrar?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
  rejeitar?: p.Flex<typeof Button>;
};

export interface DefaultEntrarGrupoProps {}

function PlasmicEntrarGrupo__RenderFunc(props: {
  variants: PlasmicEntrarGrupo__VariantsArgs;
  args: PlasmicEntrarGrupo__ArgsType;
  overrides: PlasmicEntrarGrupo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <HeaderLogged
            data-plasmic-name={"headerLogged"}
            data-plasmic-override={overrides.headerLogged}
            className={classNames("__wab_instance", sty.headerLogged)}
          />

          <div
            data-plasmic-name={"dados"}
            data-plasmic-override={overrides.dados}
            className={classNames(projectcss.all, sty.dados)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hJlOm)}
                  displayHeight={"115px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"115px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/protect_2_self/images/defaultPfpsvgpng.png",
                    fullWidth: 2048,
                    fullHeight: 2048,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.fotoGrupo
            })}
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__abNN
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2___64MLm
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {"Nome do Grupo"}
                          </span>
                        </React.Fragment>
                      </h2>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              ),

              value: args.slot
            })}

            <div className={classNames(projectcss.all, sty.freeBox__wuykD)}>
              {p.renderPlasmicSlot({
                defaultContents: "Descricao do grupo",
                value: args.slot2,
                className: classNames(sty.slotTargetSlot2)
              })}
            </div>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__kFFsR)}>
                <Button
                  data-plasmic-name={"entrar"}
                  data-plasmic-override={overrides.entrar}
                  className={classNames("__wab_instance", sty.entrar)}
                  color={"yellow" as const}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Entrar"}
                  </div>
                </Button>

                <Button
                  data-plasmic-name={"rejeitar"}
                  data-plasmic-override={overrides.rejeitar}
                  className={classNames("__wab_instance", sty.rejeitar)}
                >
                  {"Rejeitar"}
                </Button>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headerLogged", "dados", "entrar", "text", "rejeitar"],
  headerLogged: ["headerLogged"],
  dados: ["dados", "entrar", "text", "rejeitar"],
  entrar: ["entrar", "text"],
  text: ["text"],
  rejeitar: ["rejeitar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLogged: typeof HeaderLogged;
  dados: "div";
  entrar: typeof Button;
  text: "div";
  rejeitar: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEntrarGrupo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEntrarGrupo__VariantsArgs;
    args?: PlasmicEntrarGrupo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEntrarGrupo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEntrarGrupo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEntrarGrupo__ArgProps,
          internalVariantPropNames: PlasmicEntrarGrupo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEntrarGrupo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEntrarGrupo";
  } else {
    func.displayName = `PlasmicEntrarGrupo.${nodeName}`;
  }
  return func;
}

export const PlasmicEntrarGrupo = Object.assign(
  // Top-level PlasmicEntrarGrupo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLogged: makeNodeComponent("headerLogged"),
    dados: makeNodeComponent("dados"),
    entrar: makeNodeComponent("entrar"),
    text: makeNodeComponent("text"),
    rejeitar: makeNodeComponent("rejeitar"),

    // Metadata about props expected for PlasmicEntrarGrupo
    internalVariantProps: PlasmicEntrarGrupo__VariantProps,
    internalArgProps: PlasmicEntrarGrupo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEntrarGrupo;
/* prettier-ignore-end */
