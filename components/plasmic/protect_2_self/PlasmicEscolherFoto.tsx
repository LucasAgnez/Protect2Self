// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: 7ZZm-pBIrx
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicEscolherFoto.module.css"; // plasmic-import: 7ZZm-pBIrx/css

export type PlasmicEscolherFoto__VariantMembers = {};
export type PlasmicEscolherFoto__VariantsArgs = {};
type VariantPropType = keyof PlasmicEscolherFoto__VariantsArgs;
export const PlasmicEscolherFoto__VariantProps = new Array<VariantPropType>();

export type PlasmicEscolherFoto__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicEscolherFoto__ArgsType;
export const PlasmicEscolherFoto__ArgProps = new Array<ArgPropType>("children");

export type PlasmicEscolherFoto__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  h4?: p.Flex<"h4">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultEscolherFotoProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicEscolherFoto__RenderFunc(props: {
  variants: PlasmicEscolherFoto__VariantsArgs;
  args: PlasmicEscolherFoto__ArgsType;
  overrides: PlasmicEscolherFoto__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h4
                    data-plasmic-name={"h4"}
                    data-plasmic-override={overrides.h4}
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Escolha uma foto"}
                      </span>
                    </React.Fragment>
                  </h4>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h3>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>

      {p.renderPlasmicSlot({
        defaultContents: null,
        value: args.children
      })}

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__xEHr)}
        displayHeight={"auto" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"27px" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/protect_2_self/images/lapispng.png",
          fullWidth: 512,
          fullHeight: 512,
          aspectRatio: undefined
        }}
      />

      <NavigationBar
        data-plasmic-name={"navigationBar"}
        data-plasmic-override={overrides.navigationBar}
        brand={
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          />
        }
        className={classNames("__wab_instance", sty.navigationBar)}
        closeButton={
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__vtw0)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            src={"https://static1.plasmic.app/close.svg" as const}
          />
        }
        forceOpenMenu={false}
        itemsGap={8 as const}
        menuItems={
          <React.Fragment>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__cz9KQ
              )}
              component={Link}
              href={"/" as const}
              platform={"nextjs"}
            >
              {"Home"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__gErHt
              )}
              component={Link}
              href={"/" as const}
              platform={"nextjs"}
            >
              {"About"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___34VtH
              )}
              component={Link}
              href={"/" as const}
              platform={"nextjs"}
            >
              {"Contact"}
            </p.PlasmicLink>
          </React.Fragment>
        }
        openButton={
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__nUckm)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"128px" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/protect_2_self/images/defaultPfpsvgpng.png",
              fullWidth: 2048,
              fullHeight: 2048,
              aspectRatio: undefined
            }}
          />
        }
        responsiveBreakpoint={768 as const}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "h3", "h4", "navigationBar", "freeBox"],
  text: ["text", "h3", "h4"],
  h3: ["h3", "h4"],
  h4: ["h4"],
  navigationBar: ["navigationBar", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  h3: "h3";
  h4: "h4";
  navigationBar: typeof NavigationBar;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEscolherFoto__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEscolherFoto__VariantsArgs;
    args?: PlasmicEscolherFoto__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEscolherFoto__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEscolherFoto__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEscolherFoto__ArgProps,
          internalVariantPropNames: PlasmicEscolherFoto__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEscolherFoto__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEscolherFoto";
  } else {
    func.displayName = `PlasmicEscolherFoto.${nodeName}`;
  }
  return func;
}

export const PlasmicEscolherFoto = Object.assign(
  // Top-level PlasmicEscolherFoto renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    h3: makeNodeComponent("h3"),
    h4: makeNodeComponent("h4"),
    navigationBar: makeNodeComponent("navigationBar"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicEscolherFoto
    internalVariantProps: PlasmicEscolherFoto__VariantProps,
    internalArgProps: PlasmicEscolherFoto__ArgProps
  }
);

export default PlasmicEscolherFoto;
/* prettier-ignore-end */
