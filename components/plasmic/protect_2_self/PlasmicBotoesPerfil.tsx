// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: RmM8H_pqLGC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: CJ-3PKujtR-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicBotoesPerfil.module.css"; // plasmic-import: RmM8H_pqLGC/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon

export type PlasmicBotoesPerfil__VariantMembers = {};
export type PlasmicBotoesPerfil__VariantsArgs = {};
type VariantPropType = keyof PlasmicBotoesPerfil__VariantsArgs;
export const PlasmicBotoesPerfil__VariantProps = new Array<VariantPropType>();

export type PlasmicBotoesPerfil__ArgsType = {};
type ArgPropType = keyof PlasmicBotoesPerfil__ArgsType;
export const PlasmicBotoesPerfil__ArgProps = new Array<ArgPropType>();

export type PlasmicBotoesPerfil__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultBotoesPerfilProps {
  className?: string;
}

function PlasmicBotoesPerfil__RenderFunc(props: {
  variants: PlasmicBotoesPerfil__VariantsArgs;
  args: PlasmicBotoesPerfil__ArgsType;
  overrides: PlasmicBotoesPerfil__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Button
          className={classNames("__wab_instance", sty.button__ntRu)}
          link={`/adiciona-amigo`}
        >
          {"Adicionar Amigo"}
        </Button>

        <Button
          className={classNames("__wab_instance", sty.button__hLi1V)}
          link={`/pagina-de-medalhas`}
        >
          {"Medalhas"}
        </Button>

        <Button
          className={classNames("__wab_instance", sty.button__j5Wgz)}
          link={`/lista-de-amigos`}
        >
          {"Contatos"}
        </Button>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBotoesPerfil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBotoesPerfil__VariantsArgs;
    args?: PlasmicBotoesPerfil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBotoesPerfil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBotoesPerfil__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBotoesPerfil__ArgProps,
          internalVariantPropNames: PlasmicBotoesPerfil__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBotoesPerfil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBotoesPerfil";
  } else {
    func.displayName = `PlasmicBotoesPerfil.${nodeName}`;
  }
  return func;
}

export const PlasmicBotoesPerfil = Object.assign(
  // Top-level PlasmicBotoesPerfil renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicBotoesPerfil
    internalVariantProps: PlasmicBotoesPerfil__VariantProps,
    internalArgProps: PlasmicBotoesPerfil__ArgProps
  }
);

export default PlasmicBotoesPerfil;
/* prettier-ignore-end */
