// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: ZRQuop94HB5
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLogged from "../../HeaderLogged"; // plasmic-import: gLO3qE5tA7/component
import Sino from "../../Sino"; // plasmic-import: 8ffeYo97RRO/component
import Sino__Option from "../../Sino__Option"; // plasmic-import: jPpxgeQY5Gm/component
import BotoesMenuPrincipal from "../../BotoesMenuPrincipal"; // plasmic-import: 8PboOpLyrBm/component
import Button from "../../Button"; // plasmic-import: CJ-3PKujtR-/component

import { useScreenVariants as useScreenVariantswwY5HaVRu8X4 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WwY5HA-vRU8x4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicPreviaGrupo.module.css"; // plasmic-import: ZRQuop94HB5/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon

export type PlasmicPreviaGrupo__VariantMembers = {};
export type PlasmicPreviaGrupo__VariantsArgs = {};
type VariantPropType = keyof PlasmicPreviaGrupo__VariantsArgs;
export const PlasmicPreviaGrupo__VariantProps = new Array<VariantPropType>();

export type PlasmicPreviaGrupo__ArgsType = {};
type ArgPropType = keyof PlasmicPreviaGrupo__ArgsType;
export const PlasmicPreviaGrupo__ArgProps = new Array<ArgPropType>();

export type PlasmicPreviaGrupo__OverridesType = {
  root?: p.Flex<"div">;
  headerLogged?: p.Flex<typeof HeaderLogged>;
  columns?: p.Flex<"div">;
  sino?: p.Flex<typeof Sino>;
  botoesMenuPrincipal?: p.Flex<typeof BotoesMenuPrincipal>;
  fotoPerfil?: p.Flex<typeof p.PlasmicImg>;
  nomeGrupo?: p.Flex<"h2">;
  descricao?: p.Flex<"div">;
  membros?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultPreviaGrupoProps {}

function PlasmicPreviaGrupo__RenderFunc(props: {
  variants: PlasmicPreviaGrupo__VariantsArgs;
  args: PlasmicPreviaGrupo__ArgsType;
  overrides: PlasmicPreviaGrupo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswwY5HaVRu8X4()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPreviaGrupo.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPreviaGrupo.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPreviaGrupo.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <HeaderLogged
                data-plasmic-name={"headerLogged"}
                data-plasmic-override={overrides.headerLogged}
                className={classNames("__wab_instance", sty.headerLogged)}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__i9PRf)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ryWz5)}
                  >
                    <Sino
                      data-plasmic-name={"sino"}
                      data-plasmic-override={overrides.sino}
                      className={classNames("__wab_instance", sty.sino)}
                      color={"dark" as const}
                    />
                  </div>

                  <BotoesMenuPrincipal
                    data-plasmic-name={"botoesMenuPrincipal"}
                    data-plasmic-override={overrides.botoesMenuPrincipal}
                    className={classNames(
                      "__wab_instance",
                      sty.botoesMenuPrincipal
                    )}
                  />
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.column__zcO1G)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x6Bwe
                        )}
                      >
                        <p.PlasmicImg
                          data-plasmic-name={"fotoPerfil"}
                          data-plasmic-override={overrides.fotoPerfil}
                          alt={""}
                          className={classNames(sty.fotoPerfil)}
                          displayHeight={"172px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/protect_2_self/images/defaultPfpsvgpng.png",
                            fullWidth: 2048,
                            fullHeight: 2048,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mXYz
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cvWzn
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  data-plasmic-name={"nomeGrupo"}
                                  data-plasmic-override={overrides.nomeGrupo}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.nomeGrupo
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#FFFFFF" }}
                                    >
                                      {"Nome Grupo"}
                                    </span>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vyguU
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__pLsbi
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#FFFFFF" }}
                                    >
                                      {"Descrição:"}
                                    </span>
                                  </React.Fragment>
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ygGp3
                            )}
                          >
                            <div
                              data-plasmic-name={"descricao"}
                              data-plasmic-override={overrides.descricao}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.descricao
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#C9C9C9" }}
                                >
                                  {"Enter some text"}
                                </span>
                              </React.Fragment>
                            </div>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dyYkB
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__h4MTl
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#FFFFFF" }}
                                    >
                                      {"Membros:"}
                                    </span>
                                  </React.Fragment>
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>

                          <div
                            data-plasmic-name={"membros"}
                            data-plasmic-override={overrides.membros}
                            className={classNames(projectcss.all, sty.membros)}
                          />

                          <Button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            className={classNames("__wab_instance", sty.button)}
                            color={"yellow" as const}
                          >
                            {"Adicionar"}
                          </Button>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLogged",
    "columns",
    "sino",
    "botoesMenuPrincipal",
    "fotoPerfil",
    "nomeGrupo",
    "descricao",
    "membros",
    "button"
  ],
  headerLogged: ["headerLogged"],
  columns: [
    "columns",
    "sino",
    "botoesMenuPrincipal",
    "fotoPerfil",
    "nomeGrupo",
    "descricao",
    "membros",
    "button"
  ],
  sino: ["sino"],
  botoesMenuPrincipal: ["botoesMenuPrincipal"],
  fotoPerfil: ["fotoPerfil"],
  nomeGrupo: ["nomeGrupo"],
  descricao: ["descricao"],
  membros: ["membros"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLogged: typeof HeaderLogged;
  columns: "div";
  sino: typeof Sino;
  botoesMenuPrincipal: typeof BotoesMenuPrincipal;
  fotoPerfil: typeof p.PlasmicImg;
  nomeGrupo: "h2";
  descricao: "div";
  membros: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPreviaGrupo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPreviaGrupo__VariantsArgs;
    args?: PlasmicPreviaGrupo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPreviaGrupo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPreviaGrupo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPreviaGrupo__ArgProps,
          internalVariantPropNames: PlasmicPreviaGrupo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPreviaGrupo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPreviaGrupo";
  } else {
    func.displayName = `PlasmicPreviaGrupo.${nodeName}`;
  }
  return func;
}

export const PlasmicPreviaGrupo = Object.assign(
  // Top-level PlasmicPreviaGrupo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLogged: makeNodeComponent("headerLogged"),
    columns: makeNodeComponent("columns"),
    sino: makeNodeComponent("sino"),
    botoesMenuPrincipal: makeNodeComponent("botoesMenuPrincipal"),
    fotoPerfil: makeNodeComponent("fotoPerfil"),
    nomeGrupo: makeNodeComponent("nomeGrupo"),
    descricao: makeNodeComponent("descricao"),
    membros: makeNodeComponent("membros"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicPreviaGrupo
    internalVariantProps: PlasmicPreviaGrupo__VariantProps,
    internalArgProps: PlasmicPreviaGrupo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Enviar",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPreviaGrupo;
/* prettier-ignore-end */
