// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: wDSCRg8KhN
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicChatMiniature.module.css"; // plasmic-import: wDSCRg8KhN/css

export type PlasmicChatMiniature__VariantMembers = {};

export type PlasmicChatMiniature__VariantsArgs = {};
type VariantPropType = keyof PlasmicChatMiniature__VariantsArgs;
export const PlasmicChatMiniature__VariantProps = new Array<VariantPropType>();

export type PlasmicChatMiniature__ArgsType = {
  chatPicture?: React.ReactNode;
  lastMessage?: React.ReactNode;
  chatName?: React.ReactNode;
};

type ArgPropType = keyof PlasmicChatMiniature__ArgsType;
export const PlasmicChatMiniature__ArgProps = new Array<ArgPropType>(
  "chatPicture",
  "lastMessage",
  "chatName"
);

export type PlasmicChatMiniature__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultChatMiniatureProps {
  chatPicture?: React.ReactNode;
  lastMessage?: React.ReactNode;
  chatName?: React.ReactNode;
  className?: string;
}

function PlasmicChatMiniature__RenderFunc(props: {
  variants: PlasmicChatMiniature__VariantsArgs;
  args: PlasmicChatMiniature__ArgsType;
  overrides: PlasmicChatMiniature__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__gd3LV)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8Wom1
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"ChatName"}
                </span>
              </React.Fragment>
            </div>
          ),

          value: args.chatName
        })}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___9Gae0)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___0QQFs)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/protect_2_self/images/defaultPfpsvgpng.png",
                fullWidth: 2048,
                fullHeight: 2048,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.chatPicture
        })}

        <div className={classNames(projectcss.all, sty.freeBox__ravI)}>
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.lastMessage
          })}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChatMiniature__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChatMiniature__VariantsArgs;
    args?: PlasmicChatMiniature__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChatMiniature__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChatMiniature__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicChatMiniature__ArgProps,
          internalVariantPropNames: PlasmicChatMiniature__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicChatMiniature__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatMiniature";
  } else {
    func.displayName = `PlasmicChatMiniature.${nodeName}`;
  }
  return func;
}

export const PlasmicChatMiniature = Object.assign(
  // Top-level PlasmicChatMiniature renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicChatMiniature
    internalVariantProps: PlasmicChatMiniature__VariantProps,
    internalArgProps: PlasmicChatMiniature__ArgProps
  }
);

export default PlasmicChatMiniature;
/* prettier-ignore-end */
