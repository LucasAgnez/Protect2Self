// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: KPpoVpAQVdw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLogged from "../../HeaderLogged"; // plasmic-import: gLO3qE5tA7/component
import BotoesPerfil from "../../BotoesPerfil"; // plasmic-import: RmM8H_pqLGC/component
import Button from "../../Button"; // plasmic-import: CJ-3PKujtR-/component
import TextInput from "../../TextInput"; // plasmic-import: 7q4dYfz6E__/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicAdicionaAmigo.module.css"; // plasmic-import: KPpoVpAQVdw/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import LeftArrowSvgrepoComsvgIcon from "./icons/PlasmicIcon__LeftArrowSvgrepoComsvg"; // plasmic-import: fmFspLMBVy/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: WK-uNEKVCw3/icon

export type PlasmicAdicionaAmigo__VariantMembers = {};
export type PlasmicAdicionaAmigo__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdicionaAmigo__VariantsArgs;
export const PlasmicAdicionaAmigo__VariantProps = new Array<VariantPropType>();

export type PlasmicAdicionaAmigo__ArgsType = {};
type ArgPropType = keyof PlasmicAdicionaAmigo__ArgsType;
export const PlasmicAdicionaAmigo__ArgProps = new Array<ArgPropType>();

export type PlasmicAdicionaAmigo__OverridesType = {
  root?: p.Flex<"div">;
  headerLogged?: p.Flex<typeof HeaderLogged>;
  columns?: p.Flex<"div">;
  botoesPerfil?: p.Flex<typeof BotoesPerfil>;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  busca?: p.Flex<typeof TextInput>;
  confirma?: p.Flex<typeof Button>;
  usuarios?: p.Flex<"div">;
};

export interface DefaultAdicionaAmigoProps {}

function PlasmicAdicionaAmigo__RenderFunc(props: {
  variants: PlasmicAdicionaAmigo__VariantsArgs;
  args: PlasmicAdicionaAmigo__ArgsType;
  overrides: PlasmicAdicionaAmigo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <HeaderLogged
            data-plasmic-name={"headerLogged"}
            data-plasmic-override={overrides.headerLogged}
            className={classNames("__wab_instance", sty.headerLogged)}
          />

          {true ? (
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.column__oy7Bu)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yD5VN)}
                  >
                    <BotoesPerfil
                      data-plasmic-name={"botoesPerfil"}
                      data-plasmic-override={overrides.botoesPerfil}
                      className={classNames("__wab_instance", sty.botoesPerfil)}
                    />
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.column__dj7Ep)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rwCsa)}
                  >
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      color={"clear" as const}
                      link={`/perfil`}
                      shape={"round" as const}
                    >
                      <LeftArrowSvgrepoComsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    </Button>
                  </div>

                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {"Adicionar Amigo"}
                            </span>
                          </React.Fragment>
                        </h4>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yU1Po)}
                    >
                      <TextInput
                        data-plasmic-name={"busca"}
                        data-plasmic-override={overrides.busca}
                        className={classNames("__wab_instance", sty.busca)}
                        color={"dark" as const}
                        id={"buscaAmigo" as const}
                        placeholder={
                          "Você pode adicionar amigos pelo nome de usuário ou email" as const
                        }
                        showStartIcon={true}
                      />

                      <Button
                        data-plasmic-name={"confirma"}
                        data-plasmic-override={overrides.confirma}
                        className={classNames("__wab_instance", sty.confirma)}
                        color={"yellow" as const}
                      >
                        {"Buscar"}
                      </Button>
                    </div>
                  ) : null}

                  <div
                    data-plasmic-name={"usuarios"}
                    data-plasmic-override={overrides.usuarios}
                    className={classNames(projectcss.all, sty.usuarios)}
                  />
                </div>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLogged",
    "columns",
    "botoesPerfil",
    "button",
    "svg",
    "text",
    "h4",
    "busca",
    "confirma",
    "usuarios"
  ],
  headerLogged: ["headerLogged"],
  columns: [
    "columns",
    "botoesPerfil",
    "button",
    "svg",
    "text",
    "h4",
    "busca",
    "confirma",
    "usuarios"
  ],
  botoesPerfil: ["botoesPerfil"],
  button: ["button", "svg"],
  svg: ["svg"],
  text: ["text", "h4"],
  h4: ["h4"],
  busca: ["busca"],
  confirma: ["confirma"],
  usuarios: ["usuarios"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLogged: typeof HeaderLogged;
  columns: "div";
  botoesPerfil: typeof BotoesPerfil;
  button: typeof Button;
  svg: "svg";
  text: "div";
  h4: "h4";
  busca: typeof TextInput;
  confirma: typeof Button;
  usuarios: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdicionaAmigo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdicionaAmigo__VariantsArgs;
    args?: PlasmicAdicionaAmigo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdicionaAmigo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdicionaAmigo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdicionaAmigo__ArgProps,
          internalVariantPropNames: PlasmicAdicionaAmigo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAdicionaAmigo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdicionaAmigo";
  } else {
    func.displayName = `PlasmicAdicionaAmigo.${nodeName}`;
  }
  return func;
}

export const PlasmicAdicionaAmigo = Object.assign(
  // Top-level PlasmicAdicionaAmigo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLogged: makeNodeComponent("headerLogged"),
    columns: makeNodeComponent("columns"),
    botoesPerfil: makeNodeComponent("botoesPerfil"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    h4: makeNodeComponent("h4"),
    busca: makeNodeComponent("busca"),
    confirma: makeNodeComponent("confirma"),
    usuarios: makeNodeComponent("usuarios"),

    // Metadata about props expected for PlasmicAdicionaAmigo
    internalVariantProps: PlasmicAdicionaAmigo__VariantProps,
    internalArgProps: PlasmicAdicionaAmigo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdicionaAmigo;
/* prettier-ignore-end */
