// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: Cwcul4UrW6HS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLogged from "../../HeaderLogged"; // plasmic-import: gLO3qE5tA7/component
import SinoNotificacao from "../../SinoNotificacao"; // plasmic-import: aegxh_farI/component
import MainPageButton from "../../MainPageButton"; // plasmic-import: hF66z6g8PUp/component
import MiniaturaMeta from "../../MiniaturaMeta"; // plasmic-import: LQeW26Vvq3/component
import MiniaturaGrupo from "../../MiniaturaGrupo"; // plasmic-import: QylFKCNC0eW/component

import { useScreenVariants as useScreenVariantswwY5HaVRu8X4 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WwY5HA-vRU8x4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicInicial.module.css"; // plasmic-import: Cwcul4UrW6HS/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon

export type PlasmicInicial__VariantMembers = {
  metas: "metas";
  grupos: "grupos";
};

export type PlasmicInicial__VariantsArgs = {
  metas?: SingleBooleanChoiceArg<"metas">;
  grupos?: SingleBooleanChoiceArg<"grupos">;
};

type VariantPropType = keyof PlasmicInicial__VariantsArgs;
export const PlasmicInicial__VariantProps = new Array<VariantPropType>(
  "metas",
  "grupos"
);

export type PlasmicInicial__ArgsType = {};
type ArgPropType = keyof PlasmicInicial__ArgsType;
export const PlasmicInicial__ArgProps = new Array<ArgPropType>();

export type PlasmicInicial__OverridesType = {
  root?: p.Flex<"div">;
  headerLogged?: p.Flex<typeof HeaderLogged>;
  columns?: p.Flex<"div">;
  sinoNotificacao?: p.Flex<typeof SinoNotificacao>;
};

export interface DefaultInicialProps {}

function PlasmicInicial__RenderFunc(props: {
  variants: PlasmicInicial__VariantsArgs;
  args: PlasmicInicial__ArgsType;
  overrides: PlasmicInicial__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswwY5HaVRu8X4()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicInicial.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicInicial.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicInicial.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root,
              {
                [sty.rootgrupos]: hasVariant(variants, "grupos", "grupos"),
                [sty.rootmetas]: hasVariant(variants, "metas", "metas")
              }
            )}
          >
            {true ? (
              <HeaderLogged
                data-plasmic-name={"headerLogged"}
                data-plasmic-override={overrides.headerLogged}
                className={classNames("__wab_instance", sty.headerLogged)}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns, {
                  [sty.columnsgrupos]: hasVariant(variants, "grupos", "grupos"),
                  [sty.columnsmetas]: hasVariant(variants, "metas", "metas")
                })}
              >
                {(
                  hasVariant(variants, "grupos", "grupos") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : hasVariant(variants, "grupos", "grupos")
                    ? true
                    : hasVariant(variants, "metas", "metas") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : hasVariant(variants, "metas", "metas")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.column__xzDzp, {
                      [sty.columngrupos__xzDzpMLdjO]: hasVariant(
                        variants,
                        "grupos",
                        "grupos"
                      ),
                      [sty.columnmetas__xzDzphKOvR]: hasVariant(
                        variants,
                        "metas",
                        "metas"
                      )
                    })}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vxAzA)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__g29S5
                          )}
                        >
                          <SinoNotificacao
                            data-plasmic-name={"sinoNotificacao"}
                            data-plasmic-override={overrides.sinoNotificacao}
                            className={classNames(
                              "__wab_instance",
                              sty.sinoNotificacao
                            )}
                          />
                        </div>
                      ) : null}

                      <MainPageButton
                        className={classNames(
                          "__wab_instance",
                          sty.mainPageButton__jqrpR,
                          {
                            [sty.mainPageButtonmetas__jqrpRhKOvR]: hasVariant(
                              variants,
                              "metas",
                              "metas"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vf1Ba
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h5
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h5,
                                  projectcss.__wab_text,
                                  sty.h5___6Lto
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__uIkXa
                                      )}
                                    >
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ color: "#FFFFFF" }}
                                        >
                                          {"Minhas Metas"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </h5>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </MainPageButton>

                      <MainPageButton
                        className={classNames(
                          "__wab_instance",
                          sty.mainPageButton__ymdlW
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4XY9
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h5
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h5,
                                  projectcss.__wab_text,
                                  sty.h5__f9Sji
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__x5KJn
                                      )}
                                    >
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ color: "#FFFFFF" }}
                                        >
                                          {"Meus Grupos"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </h5>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </MainPageButton>

                      <MainPageButton
                        className={classNames(
                          "__wab_instance",
                          sty.mainPageButton__cdYpZ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7MCup
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h5
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h5,
                                  projectcss.__wab_text,
                                  sty.h5__ikqcu
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__pwNU
                                      )}
                                    >
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ color: "#FFFFFF" }}
                                        >
                                          {"Criar Meta"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </h5>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </MainPageButton>

                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <MainPageButton
                          className={classNames(
                            "__wab_instance",
                            sty.mainPageButton__m22Fi
                          )}
                          link={`/criacao-grupo`}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iRRqf
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__zviM2
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h4
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h4,
                                          projectcss.__wab_text,
                                          sty.h4__e0QK3
                                        )}
                                      >
                                        <React.Fragment>
                                          <span
                                            className={
                                              "plasmic_default__all plasmic_default__span"
                                            }
                                            style={{ color: "#FFFFFF" }}
                                          >
                                            {"Criar Grupo"}
                                          </span>
                                        </React.Fragment>
                                      </h4>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        </MainPageButton>
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
                {(
                  hasVariant(variants, "grupos", "grupos")
                    ? true
                    : hasVariant(variants, "metas", "metas")
                    ? true
                    : hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.column__sPnqS, {
                      [sty.columngrupos__sPnqSmLdjO]: hasVariant(
                        variants,
                        "grupos",
                        "grupos"
                      ),
                      [sty.columnmetas__sPnqShKOvR]: hasVariant(
                        variants,
                        "metas",
                        "metas"
                      )
                    })}
                  >
                    {(hasVariant(variants, "metas", "metas") ? true : true) ? (
                      <MainPageButton
                        className={classNames(
                          "__wab_instance",
                          sty.mainPageButton__euzl5,
                          {
                            [sty.mainPageButtonmetas__euzl5HKOvR]: hasVariant(
                              variants,
                              "metas",
                              "metas"
                            )
                          }
                        )}
                        color={
                          hasVariant(variants, "metas", "metas")
                            ? ("yellow" as const)
                            : undefined
                        }
                        link={
                          hasVariant(variants, "metas", "metas")
                            ? `/criacao-meta`
                            : undefined
                        }
                        shape={
                          hasVariant(variants, "metas", "metas")
                            ? ("rounded" as const)
                            : undefined
                        }
                        size={
                          hasVariant(variants, "metas", "metas")
                            ? ("minimal" as const)
                            : undefined
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aAc4G
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h5
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h5,
                                  projectcss.__wab_text,
                                  sty.h5__vpc3O
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__kPtj7,
                                        {
                                          [sty.h4metas__kPtj7HKOvR]: hasVariant(
                                            variants,
                                            "metas",
                                            "metas"
                                          )
                                        }
                                      )}
                                    >
                                      {hasVariant(
                                        variants,
                                        "metas",
                                        "metas"
                                      ) ? (
                                        <React.Fragment>
                                          <span
                                            className={
                                              "plasmic_default__all plasmic_default__span"
                                            }
                                            style={{ color: "#000000" }}
                                          >
                                            {"Criar Meta"}
                                          </span>
                                        </React.Fragment>
                                      ) : (
                                        <React.Fragment>
                                          <span
                                            className={
                                              "plasmic_default__all plasmic_default__span"
                                            }
                                            style={{ color: "#FFFFFF" }}
                                          >
                                            {"Button"}
                                          </span>
                                        </React.Fragment>
                                      )}
                                    </h4>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </h5>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </MainPageButton>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kXoCy,
                          {
                            [sty.freeBoxgrupos__kXoCyMLdjO]: hasVariant(
                              variants,
                              "grupos",
                              "grupos"
                            ),
                            [sty.freeBoxmetas__kXoCyhKOvR]: hasVariant(
                              variants,
                              "metas",
                              "metas"
                            )
                          }
                        )}
                      >
                        {(
                          hasVariant(variants, "metas", "metas") ? true : true
                        ) ? (
                          <MiniaturaMeta
                            className={classNames(
                              "__wab_instance",
                              sty.miniaturaMeta__hu97B,
                              {
                                [sty.miniaturaMetametas__hu97BhKOvR]:
                                  hasVariant(variants, "metas", "metas")
                              }
                            )}
                          />
                        ) : null}
                        {(
                          hasVariant(variants, "metas", "metas") ? true : true
                        ) ? (
                          <MiniaturaMeta
                            className={classNames(
                              "__wab_instance",
                              sty.miniaturaMeta__qmnXn,
                              {
                                [sty.miniaturaMetametas__qmnXnhKOvR]:
                                  hasVariant(variants, "metas", "metas")
                              }
                            )}
                          />
                        ) : null}
                        {(
                          hasVariant(variants, "metas", "metas") ? true : true
                        ) ? (
                          <MiniaturaMeta
                            className={classNames(
                              "__wab_instance",
                              sty.miniaturaMeta__gmczo,
                              {
                                [sty.miniaturaMetametas__gmczohKOvR]:
                                  hasVariant(variants, "metas", "metas")
                              }
                            )}
                            tipoMeta={
                              hasVariant(variants, "metas", "metas")
                                ? ("vicio" as const)
                                : undefined
                            }
                          />
                        ) : null}
                        {(
                          hasVariant(variants, "grupos", "grupos") ? true : true
                        ) ? (
                          <MiniaturaGrupo
                            className={classNames(
                              "__wab_instance",
                              sty.miniaturaGrupo___7Rd5L,
                              {
                                [sty.miniaturaGrupogrupos___7Rd5LmLdjO]:
                                  hasVariant(variants, "grupos", "grupos")
                              }
                            )}
                          />
                        ) : null}
                        {(
                          hasVariant(variants, "grupos", "grupos") ? true : true
                        ) ? (
                          <MiniaturaGrupo
                            className={classNames(
                              "__wab_instance",
                              sty.miniaturaGrupo___9S3MZ,
                              {
                                [sty.miniaturaGrupogrupos___9S3MZmLdjO]:
                                  hasVariant(variants, "grupos", "grupos")
                              }
                            )}
                          />
                        ) : null}
                        {(
                          hasVariant(variants, "grupos", "grupos") ? true : true
                        ) ? (
                          <MiniaturaGrupo
                            className={classNames(
                              "__wab_instance",
                              sty.miniaturaGrupo__vkx0G,
                              {
                                [sty.miniaturaGrupogrupos__vkx0GMLdjO]:
                                  hasVariant(variants, "grupos", "grupos")
                              }
                            )}
                          />
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headerLogged", "columns", "sinoNotificacao"],
  headerLogged: ["headerLogged"],
  columns: ["columns", "sinoNotificacao"],
  sinoNotificacao: ["sinoNotificacao"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLogged: typeof HeaderLogged;
  columns: "div";
  sinoNotificacao: typeof SinoNotificacao;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInicial__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInicial__VariantsArgs;
    args?: PlasmicInicial__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInicial__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInicial__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInicial__ArgProps,
          internalVariantPropNames: PlasmicInicial__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicInicial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInicial";
  } else {
    func.displayName = `PlasmicInicial.${nodeName}`;
  }
  return func;
}

export const PlasmicInicial = Object.assign(
  // Top-level PlasmicInicial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLogged: makeNodeComponent("headerLogged"),
    columns: makeNodeComponent("columns"),
    sinoNotificacao: makeNodeComponent("sinoNotificacao"),

    // Metadata about props expected for PlasmicInicial
    internalVariantProps: PlasmicInicial__VariantProps,
    internalArgProps: PlasmicInicial__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Enviar",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInicial;
/* prettier-ignore-end */
