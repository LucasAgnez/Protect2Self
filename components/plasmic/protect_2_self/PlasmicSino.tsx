// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: 8ffeYo97RRO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sino__Overlay from "../../Sino__Overlay"; // plasmic-import: q50cH6iT0uW/component
import Sino__Option from "../../Sino__Option"; // plasmic-import: jPpxgeQY5Gm/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicSino.module.css"; // plasmic-import: 8ffeYo97RRO/css

export type PlasmicSino__VariantMembers = {
  showPlaceholder: "showPlaceholder";
  isOpen: "isOpen";
  isDisabled: "isDisabled";
  color:
    | "softBlue"
    | "softCyan"
    | "softGreen"
    | "softYellow"
    | "softOrange"
    | "softRed"
    | "softPink"
    | "softPurple"
    | "softGray"
    | "clear"
    | "dark";
};
export type PlasmicSino__VariantsArgs = {
  showPlaceholder?: SingleBooleanChoiceArg<"showPlaceholder">;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  color?: SingleChoiceArg<
    | "softBlue"
    | "softCyan"
    | "softGreen"
    | "softYellow"
    | "softOrange"
    | "softRed"
    | "softPink"
    | "softPurple"
    | "softGray"
    | "clear"
    | "dark"
  >;
};
type VariantPropType = keyof PlasmicSino__VariantsArgs;
export const PlasmicSino__VariantProps = new Array<VariantPropType>(
  "showPlaceholder",
  "isOpen",
  "isDisabled",
  "color"
);

export type PlasmicSino__ArgsType = {
  children?: React.ReactNode;
  value?: string;
  name?: string;
  "aria-label"?: string;
  "aria-labelledby"?: string;
  id?: string;
};
type ArgPropType = keyof PlasmicSino__ArgsType;
export const PlasmicSino__ArgProps = new Array<ArgPropType>(
  "children",
  "value",
  "name",
  "aria-label",
  "aria-labelledby",
  "id"
);

export type PlasmicSino__OverridesType = {
  root?: p.Flex<"div">;
  trigger?: p.Flex<"button">;
  dropdownIcon?: p.Flex<typeof p.PlasmicImg>;
  overlay?: p.Flex<typeof Sino__Overlay>;
  optionsContainer?: p.Flex<"div">;
};

export interface DefaultSinoProps extends pp.BaseSelectProps {
  "aria-label"?: string;
  "aria-labelledby"?: string;
  id?: string;
  color?: SingleChoiceArg<
    | "softBlue"
    | "softCyan"
    | "softGreen"
    | "softYellow"
    | "softOrange"
    | "softRed"
    | "softPink"
    | "softPurple"
    | "softGray"
    | "clear"
    | "dark"
  >;
}

const PlasmicSinoContext = React.createContext<
  | undefined
  | { variants: PlasmicSino__VariantsArgs; args: PlasmicSino__ArgsType }
>(undefined);

function PlasmicSino__RenderFunc(props: {
  variants: PlasmicSino__VariantsArgs;
  args: PlasmicSino__ArgsType;
  overrides: PlasmicSino__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "showPlaceholder",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.showPlaceholder
      },
      {
        path: "isOpen",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.isOpen
      },
      {
        path: "isDisabled",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.isDisabled
      },
      {
        path: "color",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.color
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <PlasmicSinoContext.Provider value={{ variants, args }}>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootcolor_clear]: hasVariant($state, "color", "clear"),
            [sty.rootcolor_dark]: hasVariant($state, "color", "dark"),
            [sty.rootcolor_softBlue]: hasVariant($state, "color", "softBlue"),
            [sty.rootcolor_softCyan]: hasVariant($state, "color", "softCyan"),
            [sty.rootcolor_softGreen]: hasVariant($state, "color", "softGreen"),
            [sty.rootcolor_softOrange]: hasVariant(
              $state,
              "color",
              "softOrange"
            ),
            [sty.rootcolor_softPink]: hasVariant($state, "color", "softPink"),
            [sty.rootcolor_softPurple]: hasVariant(
              $state,
              "color",
              "softPurple"
            ),
            [sty.rootcolor_softRed]: hasVariant($state, "color", "softRed"),
            [sty.rootcolor_softYellow]: hasVariant(
              $state,
              "color",
              "softYellow"
            ),
            [sty.rootisOpen]: hasVariant($state, "isOpen", "isOpen")
          }
        )}
      >
        <button
          data-plasmic-name={"trigger"}
          data-plasmic-override={overrides.trigger}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.trigger,
            {
              [sty.triggercolor_clear]: hasVariant($state, "color", "clear"),
              [sty.triggercolor_dark]: hasVariant($state, "color", "dark"),
              [sty.triggercolor_dark_isOpen]:
                hasVariant($state, "isOpen", "isOpen") &&
                hasVariant($state, "color", "dark"),
              [sty.triggercolor_softBlue]: hasVariant(
                $state,
                "color",
                "softBlue"
              ),
              [sty.triggercolor_softCyan]: hasVariant(
                $state,
                "color",
                "softCyan"
              ),
              [sty.triggercolor_softGray]: hasVariant(
                $state,
                "color",
                "softGray"
              ),
              [sty.triggercolor_softGreen]: hasVariant(
                $state,
                "color",
                "softGreen"
              ),
              [sty.triggercolor_softOrange]: hasVariant(
                $state,
                "color",
                "softOrange"
              ),
              [sty.triggercolor_softPink]: hasVariant(
                $state,
                "color",
                "softPink"
              ),
              [sty.triggercolor_softPurple]: hasVariant(
                $state,
                "color",
                "softPurple"
              ),
              [sty.triggercolor_softRed]: hasVariant(
                $state,
                "color",
                "softRed"
              ),
              [sty.triggercolor_softYellow]: hasVariant(
                $state,
                "color",
                "softYellow"
              ),
              [sty.triggerisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.triggerisOpen]: hasVariant($state, "isOpen", "isOpen")
            }
          )}
          disabled={
            hasVariant($state, "isDisabled", "isDisabled") ? true : undefined
          }
          id={args.id}
          value={args.value}
        >
          <p.PlasmicImg
            data-plasmic-name={"dropdownIcon"}
            data-plasmic-override={overrides.dropdownIcon}
            alt={""}
            className={classNames(sty.dropdownIcon, {
              [sty.dropdownIconcolor_dark]: hasVariant($state, "color", "dark")
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"40px" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/protect_2_self/images/sinopng.png",
              fullWidth: 4096,
              fullHeight: 4096,
              aspectRatio: undefined
            }}
          />
        </button>

        {(hasVariant($state, "isOpen", "isOpen") ? true : false) ? (
          <Sino__Overlay
            data-plasmic-name={"overlay"}
            data-plasmic-override={overrides.overlay}
            className={classNames("__wab_instance", sty.overlay, {
              [sty.overlaycolor_dark]: hasVariant($state, "color", "dark"),
              [sty.overlayisOpen]: hasVariant($state, "isOpen", "isOpen")
            })}
            relativePlacement={"bottom" as const}
          >
            <div
              data-plasmic-name={"optionsContainer"}
              data-plasmic-override={overrides.optionsContainer}
              className={classNames(projectcss.all, sty.optionsContainer, {
                [sty.optionsContainerisOpen]: hasVariant(
                  $state,
                  "isOpen",
                  "isOpen"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <Sino__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option___5CoZt
                      )}
                      color={"dark" as const}
                      value={"value1" as const}
                    >
                      {"Option 1"}
                    </Sino__Option>

                    <Sino__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__vPsvz
                      )}
                      color={"dark" as const}
                      value={"value2" as const}
                    >
                      {"Option 2"}
                    </Sino__Option>
                  </React.Fragment>
                ),
                value: args.children
              })}
            </div>
          </Sino__Overlay>
        ) : null}
      </div>
    </PlasmicSinoContext.Provider>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseSelectProps>(
  props: P,
  ref: pp.SelectRef
) {
  if (!("children" in props)) {
    props = {
      ...props,
      children: (
        <React.Fragment>
          <Sino__Option
            className={classNames("__wab_instance", sty.option___5CoZt)}
            color={"dark" as const}
            value={"value1" as const}
          >
            {"Option 1"}
          </Sino__Option>

          <Sino__Option
            className={classNames("__wab_instance", sty.option__vPsvz)}
            color={"dark" as const}
            value={"value2" as const}
          >
            {"Option 2"}
          </Sino__Option>
        </React.Fragment>
      )
    };
  }

  return pp.useSelect(
    PlasmicSino,
    props,
    {
      isOpenVariant: { group: "isOpen", variant: "isOpen" },
      placeholderVariant: {
        group: "showPlaceholder",
        variant: "showPlaceholder"
      },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      triggerContentSlot: "selectedContent",
      optionsSlot: "children",
      placeholderSlot: "placeholder",
      root: "root",
      trigger: "trigger",
      overlay: "overlay",
      optionsContainer: "optionsContainer"
    },
    ref
  );
}

const PlasmicDescendants = {
  root: ["root", "trigger", "dropdownIcon", "overlay", "optionsContainer"],
  trigger: ["trigger", "dropdownIcon"],
  dropdownIcon: ["dropdownIcon"],
  overlay: ["overlay", "optionsContainer"],
  optionsContainer: ["optionsContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  trigger: "button";
  dropdownIcon: typeof p.PlasmicImg;
  overlay: typeof Sino__Overlay;
  optionsContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSino__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSino__VariantsArgs;
    args?: PlasmicSino__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSino__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSino__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSino__ArgProps,
          internalVariantPropNames: PlasmicSino__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSino__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSino";
  } else {
    func.displayName = `PlasmicSino.${nodeName}`;
  }
  return func;
}

export const PlasmicSino = Object.assign(
  // Top-level PlasmicSino renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    trigger: makeNodeComponent("trigger"),
    dropdownIcon: makeNodeComponent("dropdownIcon"),
    overlay: makeNodeComponent("overlay"),
    optionsContainer: makeNodeComponent("optionsContainer"),

    // Metadata about props expected for PlasmicSino
    internalVariantProps: PlasmicSino__VariantProps,
    internalArgProps: PlasmicSino__ArgProps,

    // Context for sub components
    Context: PlasmicSinoContext,

    useBehavior
  }
);

export default PlasmicSino;
/* prettier-ignore-end */
