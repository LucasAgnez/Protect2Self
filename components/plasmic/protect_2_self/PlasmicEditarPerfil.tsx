// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: 9uhOKoIKliE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLogged from "../../HeaderLogged"; // plasmic-import: gLO3qE5tA7/component
import TextInput from "../../TextInput"; // plasmic-import: 7q4dYfz6E__/component
import PasswordInput from "../../PasswordInput"; // plasmic-import: s963UX2uFqp/component
import Button from "../../Button"; // plasmic-import: CJ-3PKujtR-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicEditarPerfil.module.css"; // plasmic-import: 9uhOKoIKliE/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: WK-uNEKVCw3/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon

export type PlasmicEditarPerfil__VariantMembers = {};
export type PlasmicEditarPerfil__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditarPerfil__VariantsArgs;
export const PlasmicEditarPerfil__VariantProps = new Array<VariantPropType>();

export type PlasmicEditarPerfil__ArgsType = {};
type ArgPropType = keyof PlasmicEditarPerfil__ArgsType;
export const PlasmicEditarPerfil__ArgProps = new Array<ArgPropType>();

export type PlasmicEditarPerfil__OverridesType = {
  root?: p.Flex<"div">;
  headerLogged?: p.Flex<typeof HeaderLogged>;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
  nome?: p.Flex<typeof TextInput>;
  username?: p.Flex<typeof TextInput>;
  email?: p.Flex<typeof TextInput>;
  telefone?: p.Flex<typeof TextInput>;
  senha?: p.Flex<typeof PasswordInput>;
  confirmaSenha?: p.Flex<typeof PasswordInput>;
  erro?: p.Flex<"div">;
  confirma?: p.Flex<typeof Button>;
  cancela?: p.Flex<typeof Button>;
};

export interface DefaultEditarPerfilProps {}

function PlasmicEditarPerfil__RenderFunc(props: {
  variants: PlasmicEditarPerfil__VariantsArgs;
  args: PlasmicEditarPerfil__ArgsType;
  overrides: PlasmicEditarPerfil__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <HeaderLogged
            data-plasmic-name={"headerLogged"}
            data-plasmic-override={overrides.headerLogged}
            className={classNames("__wab_instance", sty.headerLogged)}
          />

          {true ? (
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              {true ? (
                <div
                  data-plasmic-name={"column"}
                  data-plasmic-override={overrides.column}
                  className={classNames(projectcss.all, sty.column)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vR8Y)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__leWl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hoPxl
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {"Nome"}
                            </span>
                          </React.Fragment>
                        </div>

                        <TextInput
                          data-plasmic-name={"nome"}
                          data-plasmic-override={overrides.nome}
                          className={classNames("__wab_instance", sty.nome)}
                          color={"dark" as const}
                          id={"nome" as const}
                        />
                      </div>
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.freeBox__miQL)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4Lwfi
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {"Nome de Usu√°rio"}
                          </span>
                        </React.Fragment>
                      </div>

                      <TextInput
                        data-plasmic-name={"username"}
                        data-plasmic-override={overrides.username}
                        className={classNames("__wab_instance", sty.username)}
                        color={"dark" as const}
                        id={"username" as const}
                      />
                    </div>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qh7E
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__afPc
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {"Email:"}
                            </span>
                          </React.Fragment>
                        </div>

                        {true ? (
                          <TextInput
                            data-plasmic-name={"email"}
                            data-plasmic-override={overrides.email}
                            className={classNames("__wab_instance", sty.email)}
                            color={"dark" as const}
                            id={"email" as const}
                          />
                        ) : null}
                      </div>
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.freeBox__aUce6)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oR59I
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {"Telefone:"}
                          </span>
                        </React.Fragment>
                      </div>

                      {true ? (
                        <TextInput
                          data-plasmic-name={"telefone"}
                          data-plasmic-override={overrides.telefone}
                          className={classNames("__wab_instance", sty.telefone)}
                          color={"dark" as const}
                          id={"telefone" as const}
                        />
                      ) : null}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__oEKft)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__igfwh
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {"Senha"}
                          </span>
                        </React.Fragment>
                      </div>

                      {true ? (
                        <PasswordInput
                          data-plasmic-name={"senha"}
                          data-plasmic-override={overrides.senha}
                          className={classNames("__wab_instance", sty.senha)}
                          color={"dark" as const}
                          id={"senha" as const}
                          placeholder={"Digite sua senha" as const}
                        />
                      ) : null}
                    </div>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vQazt
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pYbRq
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#F7F7F7" }}
                            >
                              {"Confirme a "}
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#F7F7F7" }}
                            >
                              {"senha"}
                            </span>
                          </React.Fragment>
                        </div>

                        <PasswordInput
                          data-plasmic-name={"confirmaSenha"}
                          data-plasmic-override={overrides.confirmaSenha}
                          className={classNames(
                            "__wab_instance",
                            sty.confirmaSenha
                          )}
                          color={"dark" as const}
                          id={"confirmaSenha" as const}
                        />
                      </div>
                    ) : null}

                    <div
                      data-plasmic-name={"erro"}
                      data-plasmic-override={overrides.erro}
                      className={classNames(projectcss.all, sty.erro)}
                    />

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cKCg3
                        )}
                      >
                        {true ? (
                          <Button
                            data-plasmic-name={"confirma"}
                            data-plasmic-override={overrides.confirma}
                            className={classNames(
                              "__wab_instance",
                              sty.confirma
                            )}
                            color={"yellow" as const}
                          >
                            {"Confirmar"}
                          </Button>
                        ) : null}
                        {true ? (
                          <Button
                            data-plasmic-name={"cancela"}
                            data-plasmic-override={overrides.cancela}
                            className={classNames(
                              "__wab_instance",
                              sty.cancela
                            )}
                            link={`/perfil`}
                          >
                            {"Cancelar"}
                          </Button>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLogged",
    "columns",
    "column",
    "nome",
    "username",
    "email",
    "telefone",
    "senha",
    "confirmaSenha",
    "erro",
    "confirma",
    "cancela"
  ],
  headerLogged: ["headerLogged"],
  columns: [
    "columns",
    "column",
    "nome",
    "username",
    "email",
    "telefone",
    "senha",
    "confirmaSenha",
    "erro",
    "confirma",
    "cancela"
  ],
  column: [
    "column",
    "nome",
    "username",
    "email",
    "telefone",
    "senha",
    "confirmaSenha",
    "erro",
    "confirma",
    "cancela"
  ],
  nome: ["nome"],
  username: ["username"],
  email: ["email"],
  telefone: ["telefone"],
  senha: ["senha"],
  confirmaSenha: ["confirmaSenha"],
  erro: ["erro"],
  confirma: ["confirma"],
  cancela: ["cancela"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLogged: typeof HeaderLogged;
  columns: "div";
  column: "div";
  nome: typeof TextInput;
  username: typeof TextInput;
  email: typeof TextInput;
  telefone: typeof TextInput;
  senha: typeof PasswordInput;
  confirmaSenha: typeof PasswordInput;
  erro: "div";
  confirma: typeof Button;
  cancela: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditarPerfil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditarPerfil__VariantsArgs;
    args?: PlasmicEditarPerfil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditarPerfil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditarPerfil__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEditarPerfil__ArgProps,
          internalVariantPropNames: PlasmicEditarPerfil__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEditarPerfil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditarPerfil";
  } else {
    func.displayName = `PlasmicEditarPerfil.${nodeName}`;
  }
  return func;
}

export const PlasmicEditarPerfil = Object.assign(
  // Top-level PlasmicEditarPerfil renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLogged: makeNodeComponent("headerLogged"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    nome: makeNodeComponent("nome"),
    username: makeNodeComponent("username"),
    email: makeNodeComponent("email"),
    telefone: makeNodeComponent("telefone"),
    senha: makeNodeComponent("senha"),
    confirmaSenha: makeNodeComponent("confirmaSenha"),
    erro: makeNodeComponent("erro"),
    confirma: makeNodeComponent("confirma"),
    cancela: makeNodeComponent("cancela"),

    // Metadata about props expected for PlasmicEditarPerfil
    internalVariantProps: PlasmicEditarPerfil__VariantProps,
    internalArgProps: PlasmicEditarPerfil__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditarPerfil;
/* prettier-ignore-end */
