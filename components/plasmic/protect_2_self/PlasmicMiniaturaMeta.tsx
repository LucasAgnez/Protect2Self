// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: LQeW26Vvq3
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: CJ-3PKujtR-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicMiniaturaMeta.module.css"; // plasmic-import: LQeW26Vvq3/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon

export type PlasmicMiniaturaMeta__VariantMembers = {
  tipoMeta: "vicio" | "habito";
};

export type PlasmicMiniaturaMeta__VariantsArgs = {
  tipoMeta?: SingleChoiceArg<"vicio" | "habito">;
};

type VariantPropType = keyof PlasmicMiniaturaMeta__VariantsArgs;
export const PlasmicMiniaturaMeta__VariantProps = new Array<VariantPropType>(
  "tipoMeta"
);

export type PlasmicMiniaturaMeta__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMiniaturaMeta__ArgsType;
export const PlasmicMiniaturaMeta__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicMiniaturaMeta__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultMiniaturaMetaProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  tipoMeta?: SingleChoiceArg<"vicio" | "habito">;
  className?: string;
}

function PlasmicMiniaturaMeta__RenderFunc(props: {
  variants: PlasmicMiniaturaMeta__VariantsArgs;
  args: PlasmicMiniaturaMeta__ArgsType;
  overrides: PlasmicMiniaturaMeta__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__cowRf)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__noCej)}>
              <div className={classNames(projectcss.all, sty.freeBox__mfpq)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2QyHl
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__cOk5
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#FFFFFF" }}
                              >
                                {"Meta"}
                              </span>
                            </React.Fragment>
                          </h4>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ),

                  value: args.slot
                })}
              </div>

              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___5MP3M)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"34px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/protect_2_self/images/medalhapng.png",
                      fullWidth: 225,
                      fullHeight: 225,
                      aspectRatio: undefined
                    }}
                  />
                ),

                value: args.children
              })}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___6ExQ)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fMtNj
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#D3D3D3" }}
                    >
                      {"Sequencia"}
                    </span>
                  </React.Fragment>
                </div>
              ),

              value: args.slot2
            })}
          </div>
        </div>

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          color={"yellow" as const}
        >
          {"Registrar"}
        </Button>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMiniaturaMeta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMiniaturaMeta__VariantsArgs;
    args?: PlasmicMiniaturaMeta__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMiniaturaMeta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMiniaturaMeta__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMiniaturaMeta__ArgProps,
          internalVariantPropNames: PlasmicMiniaturaMeta__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMiniaturaMeta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMiniaturaMeta";
  } else {
    func.displayName = `PlasmicMiniaturaMeta.${nodeName}`;
  }
  return func;
}

export const PlasmicMiniaturaMeta = Object.assign(
  // Top-level PlasmicMiniaturaMeta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicMiniaturaMeta
    internalVariantProps: PlasmicMiniaturaMeta__VariantProps,
    internalArgProps: PlasmicMiniaturaMeta__ArgProps
  }
);

export default PlasmicMiniaturaMeta;
/* prettier-ignore-end */
