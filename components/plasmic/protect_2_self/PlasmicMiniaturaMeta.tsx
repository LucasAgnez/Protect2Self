// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: LQeW26Vvq3
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Medalha from "../../Medalha"; // plasmic-import: OOiN6jLpGW/component
import Button from "../../Button"; // plasmic-import: CJ-3PKujtR-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicMiniaturaMeta.module.css"; // plasmic-import: LQeW26Vvq3/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: H1GZJxswewQ/icon
import ThumbDownSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__ThumbDownSvgrepoCom2Svg"; // plasmic-import: GIzEWcU_Lc/icon
import ThumbUpSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ThumbUpSvgrepoCom1Svg"; // plasmic-import: _Too7mk-Tm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hCPX34t0fK3/icon

export type PlasmicMiniaturaMeta__VariantMembers = {
  tipo: "habito" | "vicio";
  comMedalha: "comMedalha";
};
export type PlasmicMiniaturaMeta__VariantsArgs = {
  tipo?: MultiChoiceArg<"habito" | "vicio">;
  comMedalha?: SingleBooleanChoiceArg<"comMedalha">;
};
type VariantPropType = keyof PlasmicMiniaturaMeta__VariantsArgs;
export const PlasmicMiniaturaMeta__VariantProps = new Array<VariantPropType>(
  "tipo",
  "comMedalha"
);

export type PlasmicMiniaturaMeta__ArgsType = {};
type ArgPropType = keyof PlasmicMiniaturaMeta__ArgsType;
export const PlasmicMiniaturaMeta__ArgProps = new Array<ArgPropType>();

export type PlasmicMiniaturaMeta__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  nome?: p.Flex<"h3">;
  medalha?: p.Flex<typeof Medalha>;
  sequenciaHabito?: p.Flex<"div">;
  sequenciaVicio?: p.Flex<"div">;
  disponibilidade?: p.Flex<"div">;
  registra?: p.Flex<typeof Button>;
};

export interface DefaultMiniaturaMetaProps {
  tipo?: MultiChoiceArg<"habito" | "vicio">;
  comMedalha?: SingleBooleanChoiceArg<"comMedalha">;
  className?: string;
}

function PlasmicMiniaturaMeta__RenderFunc(props: {
  variants: PlasmicMiniaturaMeta__VariantsArgs;
  args: PlasmicMiniaturaMeta__ArgsType;
  overrides: PlasmicMiniaturaMeta__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "tipo",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.tipo
      },
      {
        path: "comMedalha",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.comMedalha
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootcomMedalha]: hasVariant(
              $state,
              "comMedalha",
              "comMedalha"
            ),
            [sty.roottipo_habito_comMedalha]:
              hasVariant($state, "comMedalha", "comMedalha") &&
              hasVariant($state, "tipo", "habito"),
            [sty.roottipo_vicio_comMedalha]:
              hasVariant($state, "comMedalha", "comMedalha") &&
              hasVariant($state, "tipo", "vicio")
          }
        )}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__j9ScW, {
            [sty.freeBoxcomMedalha__j9ScWo9Sym]: hasVariant(
              $state,
              "comMedalha",
              "comMedalha"
            ),
            [sty.freeBoxtipo_vicio__j9ScW54S]: hasVariant(
              $state,
              "tipo",
              "vicio"
            ),
            [sty.freeBoxtipo_vicio_comMedalha__j9ScW54SO9Sym]:
              hasVariant($state, "comMedalha", "comMedalha") &&
              hasVariant($state, "tipo", "vicio")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___5FjU, {
              [sty.freeBoxcomMedalha___5FjUo9Sym]: hasVariant(
                $state,
                "comMedalha",
                "comMedalha"
              ),
              [sty.freeBoxtipo_habito___5FjUfpvrz]: hasVariant(
                $state,
                "tipo",
                "habito"
              ),
              [sty.freeBoxtipo_habito_comMedalha___5FjUfpvrzO9Sym]:
                hasVariant($state, "comMedalha", "comMedalha") &&
                hasVariant($state, "tipo", "habito")
            })}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h3
                    data-plasmic-name={"nome"}
                    data-plasmic-override={overrides.nome}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.nome,
                      {
                        [sty.nometipo_habito]: hasVariant(
                          $state,
                          "tipo",
                          "habito"
                        )
                      }
                    )}
                  >
                    {"Meta"}
                  </h3>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>

            {(hasVariant($state, "comMedalha", "comMedalha") ? true : true) ? (
              <Medalha
                data-plasmic-name={"medalha"}
                data-plasmic-override={overrides.medalha}
                className={classNames("__wab_instance", sty.medalha, {
                  [sty.medalhacomMedalha]: hasVariant(
                    $state,
                    "comMedalha",
                    "comMedalha"
                  )
                })}
                miniatura={true}
              />
            ) : null}
          </div>

          {true ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__fRHbH, {
                [sty.freeBoxtipo_habito__fRHbHfpvrz]: hasVariant(
                  $state,
                  "tipo",
                  "habito"
                )
              })}
            >
              {(
                hasVariant($state, "comMedalha", "comMedalha") &&
                hasVariant($state, "tipo", "habito")
                  ? true
                  : hasVariant($state, "comMedalha", "comMedalha")
                  ? true
                  : hasVariant($state, "tipo", "habito")
                  ? true
                  : false
              ) ? (
                <div
                  data-plasmic-name={"sequenciaHabito"}
                  data-plasmic-override={overrides.sequenciaHabito}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sequenciaHabito,
                    {
                      [sty.sequenciaHabitocomMedalha]: hasVariant(
                        $state,
                        "comMedalha",
                        "comMedalha"
                      ),
                      [sty.sequenciaHabitotipo_habito]: hasVariant(
                        $state,
                        "tipo",
                        "habito"
                      ),
                      [sty.sequenciaHabitotipo_habito_comMedalha]:
                        hasVariant($state, "comMedalha", "comMedalha") &&
                        hasVariant($state, "tipo", "habito"),
                      [sty.sequenciaHabitotipo_vicio]: hasVariant(
                        $state,
                        "tipo",
                        "vicio"
                      )
                    }
                  )}
                >
                  {"Sequencia"}
                </div>
              ) : null}
              {(
                hasVariant($state, "comMedalha", "comMedalha") &&
                hasVariant($state, "tipo", "vicio")
                  ? true
                  : hasVariant($state, "comMedalha", "comMedalha")
                  ? true
                  : hasVariant($state, "tipo", "habito")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"sequenciaVicio"}
                  data-plasmic-override={overrides.sequenciaVicio}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sequenciaVicio,
                    {
                      [sty.sequenciaViciocomMedalha]: hasVariant(
                        $state,
                        "comMedalha",
                        "comMedalha"
                      ),
                      [sty.sequenciaViciotipo_habito]: hasVariant(
                        $state,
                        "tipo",
                        "habito"
                      ),
                      [sty.sequenciaViciotipo_vicio]: hasVariant(
                        $state,
                        "tipo",
                        "vicio"
                      ),
                      [sty.sequenciaViciotipo_vicio_comMedalha]:
                        hasVariant($state, "comMedalha", "comMedalha") &&
                        hasVariant($state, "tipo", "vicio")
                    }
                  )}
                >
                  {"Sequencia"}
                </div>
              ) : null}

              <div
                data-plasmic-name={"disponibilidade"}
                data-plasmic-override={overrides.disponibilidade}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.disponibilidade,
                  {
                    [sty.disponibilidadetipo_habito]: hasVariant(
                      $state,
                      "tipo",
                      "habito"
                    )
                  }
                )}
              >
                {hasVariant($state, "tipo", "habito")
                  ? "Disponivel em"
                  : "Enter some text"}
              </div>
            </div>
          ) : null}
        </div>

        <Button
          data-plasmic-name={"registra"}
          data-plasmic-override={overrides.registra}
          className={classNames("__wab_instance", sty.registra, {
            [sty.registratipo_habito]: hasVariant($state, "tipo", "habito"),
            [sty.registratipo_vicio]: hasVariant($state, "tipo", "vicio")
          })}
          color={
            hasVariant($state, "tipo", "vicio")
              ? ("red" as const)
              : hasVariant($state, "tipo", "habito")
              ? ("yellow" as const)
              : ("yellow" as const)
          }
          shape={"round" as const}
        >
          {(hasVariant($state, "tipo", "vicio") ? true : true) ? (
            <ThumbDownSvgrepoCom2SvgIcon
              className={classNames(projectcss.all, sty.svg__dMbt8, {
                [sty.svgtipo_vicio__dMbt854S]: hasVariant(
                  $state,
                  "tipo",
                  "vicio"
                )
              })}
              role={"img"}
            />
          ) : null}
          {(
            hasVariant($state, "tipo", "vicio")
              ? true
              : hasVariant($state, "tipo", "habito")
              ? true
              : true
          ) ? (
            <ThumbUpSvgrepoCom1SvgIcon
              className={classNames(projectcss.all, sty.svg__nhJiK, {
                [sty.svgtipo_habito__nhJiKfpvrz]: hasVariant(
                  $state,
                  "tipo",
                  "habito"
                ),
                [sty.svgtipo_vicio__nhJiK54S]: hasVariant(
                  $state,
                  "tipo",
                  "vicio"
                )
              })}
              role={"img"}
            />
          ) : null}
        </Button>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "nome",
    "medalha",
    "sequenciaHabito",
    "sequenciaVicio",
    "disponibilidade",
    "registra"
  ],
  text: ["text", "nome"],
  nome: ["nome"],
  medalha: ["medalha"],
  sequenciaHabito: ["sequenciaHabito"],
  sequenciaVicio: ["sequenciaVicio"],
  disponibilidade: ["disponibilidade"],
  registra: ["registra"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  nome: "h3";
  medalha: typeof Medalha;
  sequenciaHabito: "div";
  sequenciaVicio: "div";
  disponibilidade: "div";
  registra: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMiniaturaMeta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMiniaturaMeta__VariantsArgs;
    args?: PlasmicMiniaturaMeta__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMiniaturaMeta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMiniaturaMeta__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMiniaturaMeta__ArgProps,
          internalVariantPropNames: PlasmicMiniaturaMeta__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMiniaturaMeta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMiniaturaMeta";
  } else {
    func.displayName = `PlasmicMiniaturaMeta.${nodeName}`;
  }
  return func;
}

export const PlasmicMiniaturaMeta = Object.assign(
  // Top-level PlasmicMiniaturaMeta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    nome: makeNodeComponent("nome"),
    medalha: makeNodeComponent("medalha"),
    sequenciaHabito: makeNodeComponent("sequenciaHabito"),
    sequenciaVicio: makeNodeComponent("sequenciaVicio"),
    disponibilidade: makeNodeComponent("disponibilidade"),
    registra: makeNodeComponent("registra"),

    // Metadata about props expected for PlasmicMiniaturaMeta
    internalVariantProps: PlasmicMiniaturaMeta__VariantProps,
    internalArgProps: PlasmicMiniaturaMeta__ArgProps
  }
);

export default PlasmicMiniaturaMeta;
/* prettier-ignore-end */
