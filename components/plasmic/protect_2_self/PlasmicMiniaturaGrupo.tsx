// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: QylFKCNC0eW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicMiniaturaGrupo.module.css"; // plasmic-import: QylFKCNC0eW/css

export type PlasmicMiniaturaGrupo__VariantMembers = {};

export type PlasmicMiniaturaGrupo__VariantsArgs = {};
type VariantPropType = keyof PlasmicMiniaturaGrupo__VariantsArgs;
export const PlasmicMiniaturaGrupo__VariantProps = new Array<VariantPropType>();

export type PlasmicMiniaturaGrupo__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMiniaturaGrupo__ArgsType;
export const PlasmicMiniaturaGrupo__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicMiniaturaGrupo__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultMiniaturaGrupoProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicMiniaturaGrupo__RenderFunc(props: {
  variants: PlasmicMiniaturaGrupo__VariantsArgs;
  args: PlasmicMiniaturaGrupo__ArgsType;
  overrides: PlasmicMiniaturaGrupo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      platform={"nextjs"}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__xvt3I)}>
          <div className={classNames(projectcss.all, sty.freeBox__s0Mnq)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kaDb)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"34px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/protect_2_self/images/defaultPfpsvgpng.png",
                    fullWidth: 2048,
                    fullHeight: 2048,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.children
            })}

            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zqbYt
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__vzOvD
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {"Nome Grupo"}
                          </span>
                        </React.Fragment>
                      </h4>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              ),

              value: args.slot
            })}
          </div>
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__dUsOl)}>
        <div className={classNames(projectcss.all, sty.freeBox__pMsdh)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ozcSt
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__qn8E5
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#B2B2B2" }}
                        >
                          {"Meta"}
                        </span>
                      </React.Fragment>
                    </h5>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            ),

            value: args.slot3
          })}
        </div>

        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eaFwx
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#D3D3D3" }}
                >
                  {"Sequencia"}
                </span>
              </React.Fragment>
            </div>
          ),

          value: args.slot2
        })}
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMiniaturaGrupo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMiniaturaGrupo__VariantsArgs;
    args?: PlasmicMiniaturaGrupo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMiniaturaGrupo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMiniaturaGrupo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMiniaturaGrupo__ArgProps,
          internalVariantPropNames: PlasmicMiniaturaGrupo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMiniaturaGrupo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMiniaturaGrupo";
  } else {
    func.displayName = `PlasmicMiniaturaGrupo.${nodeName}`;
  }
  return func;
}

export const PlasmicMiniaturaGrupo = Object.assign(
  // Top-level PlasmicMiniaturaGrupo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicMiniaturaGrupo
    internalVariantProps: PlasmicMiniaturaGrupo__VariantProps,
    internalArgProps: PlasmicMiniaturaGrupo__ArgProps
  }
);

export default PlasmicMiniaturaGrupo;
/* prettier-ignore-end */
