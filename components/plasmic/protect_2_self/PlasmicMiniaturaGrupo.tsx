// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: QylFKCNC0eW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicMiniaturaGrupo.module.css"; // plasmic-import: QylFKCNC0eW/css

export type PlasmicMiniaturaGrupo__VariantMembers = {};
export type PlasmicMiniaturaGrupo__VariantsArgs = {};
type VariantPropType = keyof PlasmicMiniaturaGrupo__VariantsArgs;
export const PlasmicMiniaturaGrupo__VariantProps = new Array<VariantPropType>();

export type PlasmicMiniaturaGrupo__ArgsType = {};
type ArgPropType = keyof PlasmicMiniaturaGrupo__ArgsType;
export const PlasmicMiniaturaGrupo__ArgProps = new Array<ArgPropType>();

export type PlasmicMiniaturaGrupo__OverridesType = {
  root?: p.Flex<"div">;
  nomeGrupo?: p.Flex<"h4">;
  metaGrupo?: p.Flex<"h5">;
  sequencia?: p.Flex<"div">;
};

export interface DefaultMiniaturaGrupoProps {
  className?: string;
}

function PlasmicMiniaturaGrupo__RenderFunc(props: {
  variants: PlasmicMiniaturaGrupo__VariantsArgs;
  args: PlasmicMiniaturaGrupo__ArgsType;
  overrides: PlasmicMiniaturaGrupo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__xvt3I)}>
            <div className={classNames(projectcss.all, sty.freeBox__s0Mnq)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zqbYt
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h4
                      data-plasmic-name={"nomeGrupo"}
                      data-plasmic-override={overrides.nomeGrupo}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.nomeGrupo
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {"Nome Grupo"}
                        </span>
                      </React.Fragment>
                    </h4>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__dUsOl)}>
          <div className={classNames(projectcss.all, sty.freeBox__pMsdh)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ozcSt
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h5
                    data-plasmic-name={"metaGrupo"}
                    data-plasmic-override={overrides.metaGrupo}
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.metaGrupo
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#B2B2B2" }}
                      >
                        {"Meta"}
                      </span>
                    </React.Fragment>
                  </h5>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </div>

          <div
            data-plasmic-name={"sequencia"}
            data-plasmic-override={overrides.sequencia}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.sequencia
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#D3D3D3" }}
              >
                {"Sequencia"}
              </span>
            </React.Fragment>
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "nomeGrupo", "metaGrupo", "sequencia"],
  nomeGrupo: ["nomeGrupo"],
  metaGrupo: ["metaGrupo"],
  sequencia: ["sequencia"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  nomeGrupo: "h4";
  metaGrupo: "h5";
  sequencia: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMiniaturaGrupo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMiniaturaGrupo__VariantsArgs;
    args?: PlasmicMiniaturaGrupo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMiniaturaGrupo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMiniaturaGrupo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMiniaturaGrupo__ArgProps,
          internalVariantPropNames: PlasmicMiniaturaGrupo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMiniaturaGrupo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMiniaturaGrupo";
  } else {
    func.displayName = `PlasmicMiniaturaGrupo.${nodeName}`;
  }
  return func;
}

export const PlasmicMiniaturaGrupo = Object.assign(
  // Top-level PlasmicMiniaturaGrupo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nomeGrupo: makeNodeComponent("nomeGrupo"),
    metaGrupo: makeNodeComponent("metaGrupo"),
    sequencia: makeNodeComponent("sequencia"),

    // Metadata about props expected for PlasmicMiniaturaGrupo
    internalVariantProps: PlasmicMiniaturaGrupo__VariantProps,
    internalArgProps: PlasmicMiniaturaGrupo__ArgProps
  }
);

export default PlasmicMiniaturaGrupo;
/* prettier-ignore-end */
