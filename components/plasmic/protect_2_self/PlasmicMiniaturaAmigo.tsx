// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8XuJZfnuNd7UvNkkshapC6
// Component: -2Az4tsp3u
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import OpcoesMembro from "../../OpcoesMembro"; // plasmic-import: _FgEegp8IaS/component
import OpcoesMembro__Option from "../../OpcoesMembro__Option"; // plasmic-import: UqHzbATt5ih/component
import OpcoesAmigoPerfil from "../../OpcoesAmigoPerfil"; // plasmic-import: EANaH4iES2Y/component
import OpcoesAmigoPerfil__Option from "../../OpcoesAmigoPerfil__Option"; // plasmic-import: rBcT3zXcB6X/component
import OpcoesAdm from "../../OpcoesAdm"; // plasmic-import: d9qSkDAT15Y/component
import OpcoesAdm__Option from "../../OpcoesAdm__Option"; // plasmic-import: BdQJvqA4IgO/component
import Medalha from "../../Medalha"; // plasmic-import: OOiN6jLpGW/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_protect_2_self.module.css"; // plasmic-import: 8XuJZfnuNd7UvNkkshapC6/projectcss
import sty from "./PlasmicMiniaturaAmigo.module.css"; // plasmic-import: -2Az4tsp3u/css

export type PlasmicMiniaturaAmigo__VariantMembers = {
  emGrupo: "adm" | "visaoDoAdm" | "visaoMembros";
};

export type PlasmicMiniaturaAmigo__VariantsArgs = {
  emGrupo?: SingleChoiceArg<"adm" | "visaoDoAdm" | "visaoMembros">;
};

type VariantPropType = keyof PlasmicMiniaturaAmigo__VariantsArgs;
export const PlasmicMiniaturaAmigo__VariantProps = new Array<VariantPropType>(
  "emGrupo"
);

export type PlasmicMiniaturaAmigo__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMiniaturaAmigo__ArgsType;
export const PlasmicMiniaturaAmigo__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicMiniaturaAmigo__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  opcoesMembro?: p.Flex<typeof OpcoesMembro>;
  opcoesAmigoPerfil?: p.Flex<typeof OpcoesAmigoPerfil>;
  opcoesAdm?: p.Flex<typeof OpcoesAdm>;
  medalha?: p.Flex<typeof Medalha>;
};

export interface DefaultMiniaturaAmigoProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  emGrupo?: SingleChoiceArg<"adm" | "visaoDoAdm" | "visaoMembros">;
  className?: string;
}

function PlasmicMiniaturaAmigo__RenderFunc(props: {
  variants: PlasmicMiniaturaAmigo__VariantsArgs;
  args: PlasmicMiniaturaAmigo__ArgsType;
  overrides: PlasmicMiniaturaAmigo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "emGrupo",
        type: "private",
        initFunc: ($props, $state) => $props.emGrupo
      }
    ],

    [$props]
  );
  const $state = p.useDollarState(stateSpecs, $props);

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootemGrupo_adm]: hasVariant($state, "emGrupo", "adm"),
          [sty.rootemGrupo_visaoDoAdm]: hasVariant(
            $state,
            "emGrupo",
            "visaoDoAdm"
          ),
          [sty.rootemGrupo_visaoMembros]: hasVariant(
            $state,
            "emGrupo",
            "visaoMembros"
          )
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img___2FjJ)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"57px" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/protect_2_self/images/defaultPfpsvgpng.png",
              fullWidth: 2048,
              fullHeight: 2048,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.children
      })}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oTYaS
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4___62ARo
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Nome Amigo"}
                      </span>
                    </React.Fragment>
                  </h4>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          ),

          value: args.slot
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mvQWr
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__vLz3T
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#A9A9A9" }}
                      >
                        {"Meta amigo"}
                      </span>
                    </React.Fragment>
                  </h6>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          ),

          value: args.slot2
        })}
      </div>

      {(hasVariant($state, "emGrupo", "adm") ? true : true) ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgemGrupo_adm]: hasVariant($state, "emGrupo", "adm")
          })}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"40px" as const}
          loading={"lazy" as const}
          src={{
            src: "/plasmic/protect_2_self/images/shieldRemovebgPreviewpng.png",
            fullWidth: 250,
            fullHeight: 201,
            aspectRatio: undefined
          }}
        />
      ) : null}
      {(
        hasVariant($state, "emGrupo", "visaoMembros")
          ? true
          : hasVariant($state, "emGrupo", "visaoDoAdm")
          ? true
          : hasVariant($state, "emGrupo", "adm")
          ? true
          : true
      ) ? (
        <OpcoesMembro
          data-plasmic-name={"opcoesMembro"}
          data-plasmic-override={overrides.opcoesMembro}
          className={classNames("__wab_instance", sty.opcoesMembro, {
            [sty.opcoesMembroemGrupo_adm]: hasVariant($state, "emGrupo", "adm"),
            [sty.opcoesMembroemGrupo_visaoDoAdm]: hasVariant(
              $state,
              "emGrupo",
              "visaoDoAdm"
            ),
            [sty.opcoesMembroemGrupo_visaoMembros]: hasVariant(
              $state,
              "emGrupo",
              "visaoMembros"
            )
          })}
        />
      ) : null}
      {(
        hasVariant($state, "emGrupo", "visaoMembros")
          ? true
          : hasVariant($state, "emGrupo", "visaoDoAdm")
          ? true
          : hasVariant($state, "emGrupo", "adm")
          ? true
          : true
      ) ? (
        <OpcoesAmigoPerfil
          data-plasmic-name={"opcoesAmigoPerfil"}
          data-plasmic-override={overrides.opcoesAmigoPerfil}
          className={classNames("__wab_instance", sty.opcoesAmigoPerfil, {
            [sty.opcoesAmigoPerfilemGrupo_adm]: hasVariant(
              $state,
              "emGrupo",
              "adm"
            ),
            [sty.opcoesAmigoPerfilemGrupo_visaoDoAdm]: hasVariant(
              $state,
              "emGrupo",
              "visaoDoAdm"
            ),
            [sty.opcoesAmigoPerfilemGrupo_visaoMembros]: hasVariant(
              $state,
              "emGrupo",
              "visaoMembros"
            )
          })}
        />
      ) : null}
      {(hasVariant($state, "emGrupo", "visaoDoAdm") ? true : true) ? (
        <OpcoesAdm
          data-plasmic-name={"opcoesAdm"}
          data-plasmic-override={overrides.opcoesAdm}
          className={classNames("__wab_instance", sty.opcoesAdm, {
            [sty.opcoesAdmemGrupo_visaoDoAdm]: hasVariant(
              $state,
              "emGrupo",
              "visaoDoAdm"
            )
          })}
        />
      ) : null}

      <Medalha
        data-plasmic-name={"medalha"}
        data-plasmic-override={overrides.medalha}
        className={classNames("__wab_instance", sty.medalha, {
          [sty.medalhaemGrupo_adm]: hasVariant($state, "emGrupo", "adm"),
          [sty.medalhaemGrupo_visaoDoAdm]: hasVariant(
            $state,
            "emGrupo",
            "visaoDoAdm"
          )
        })}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "img",
    "opcoesMembro",
    "opcoesAmigoPerfil",
    "opcoesAdm",
    "medalha"
  ],
  freeBox: ["freeBox"],
  img: ["img"],
  opcoesMembro: ["opcoesMembro"],
  opcoesAmigoPerfil: ["opcoesAmigoPerfil"],
  opcoesAdm: ["opcoesAdm"],
  medalha: ["medalha"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  img: typeof p.PlasmicImg;
  opcoesMembro: typeof OpcoesMembro;
  opcoesAmigoPerfil: typeof OpcoesAmigoPerfil;
  opcoesAdm: typeof OpcoesAdm;
  medalha: typeof Medalha;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMiniaturaAmigo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMiniaturaAmigo__VariantsArgs;
    args?: PlasmicMiniaturaAmigo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMiniaturaAmigo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMiniaturaAmigo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMiniaturaAmigo__ArgProps,
          internalVariantPropNames: PlasmicMiniaturaAmigo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMiniaturaAmigo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMiniaturaAmigo";
  } else {
    func.displayName = `PlasmicMiniaturaAmigo.${nodeName}`;
  }
  return func;
}

export const PlasmicMiniaturaAmigo = Object.assign(
  // Top-level PlasmicMiniaturaAmigo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    opcoesMembro: makeNodeComponent("opcoesMembro"),
    opcoesAmigoPerfil: makeNodeComponent("opcoesAmigoPerfil"),
    opcoesAdm: makeNodeComponent("opcoesAdm"),
    medalha: makeNodeComponent("medalha"),

    // Metadata about props expected for PlasmicMiniaturaAmigo
    internalVariantProps: PlasmicMiniaturaAmigo__VariantProps,
    internalArgProps: PlasmicMiniaturaAmigo__ArgProps
  }
);

export default PlasmicMiniaturaAmigo;
/* prettier-ignore-end */
